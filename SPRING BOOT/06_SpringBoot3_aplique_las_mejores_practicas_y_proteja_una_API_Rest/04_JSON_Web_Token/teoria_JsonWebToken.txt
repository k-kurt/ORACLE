



															02 Agregando la libreria auth0-jwt
															
Transcripción
[00:00] ¿Qué tal? Bienvenidos a su cuarta clase de su curso de Spring Security. Esta vez vamos a comenzar viendo un poco sobre en qué parte estamos en el proceso de autenticación.

[00:11] Si recuerdan bien, hasta la clase anterior vamos un rato a ver el código, vimos ya lo que es las clases propias de Spring, por ejemplo aquí en el Security, para crear nuestra configuración de seguridad y sobrescribir la configuración por defecto que Spring nos trae usar nuestro AutenticacionService.

[00:31] Para cargar nuestro usuario desde nuestra base de datos y a través de nuestro controller en nuestro AutenticacionController cargar ese usuario, generar el token y revolver ok en nuestro ResponseEntity.

[00:47] Vimos que flujo ya funciona end to end, digamos, de inicio a fin, porque ya desde el controller de nuestro API ya recibimos el DTO para los datos de autenticación y ya retornamos el usuario desde nuestra base de datos que lo hemos guardado aquí en nuestra tabla de usuarios.

[01:10] Vemos que aquí está el hash existente y todo está bien hasta aquí. A nivel de nuestro diagrama, por ejemplo, ya vimos que como primer paso nuestro usuario clave son enviados en el body, a nuestro endpoint de login, nuestro API Rest. Nuestro API Rest hace un select dentro de la base de datos y ahora, lo que él tiene que hacer es generar el JSON Web Token y devolver el JSON Web Token.

[01:36] En esta clase vamos a centrarnos específicamente en estos dos últimos pasos. Cómo genera ese JSON Web Token y cómo devuelvo ese JSON Web Token. Y lo que muchos de ustedes se deben estar preguntando ¿qué es un JSON Web Token? Bueno, vamos a comenzar esto abriendo Google y vamos a entrar a jwt.io.

[02:00] Acepto las cookies requeridas. Listo. Y esta es la página oficial de JWT JSON Web Token, como lo quieran llamar. JSON Web Token es un estándar para definición de tokens en el cual, por ejemplo el token generado es generado con un algoritmo de encriptación, por ejemplo, tenemos varios algoritmos irritación, por ejemplo aquí vemos que estaba usando un HS256, 256 bits, del tipo JWT.

[02:34] Vemos que tenemos una sección de payload, que tiene ciertos datos como un usuario, un nombre, un sub o un issue add, que es básicamente a qué hora fue firmado y una parte que es la firma de este token.

[02:50] Podemos aquí en la parte que está aquí en encoded también, por ejemplo si tú tienes algún token JWT y quieres validarlo, quieres decodificarlo, bueno, en esta página puedes copiarlo o pegarlo, escoger el algoritmo de encriptación que hayas usado y en efecto, puedes ver la información que está dentro de ese token.

[03:09] Como pueden ver, a alto nivel esto es un estándar o estándar de la industria para lo que son tokens de autenticación. Ahora si yo quiero usar este estándar, mi JSON Web Token, yo necesito ahora una librería especial para crear mi JSON Web Token aquí en el proyecto, para eso voy a venir aquí a ver librerías de JWT.

[03:33] Y cómo pueden ver aquí, por ejemplo, yo tengo a librerías para .NET, tengo librerías, tengo muchas para .NET, para Ada, distintos lenguajes de programación. Como no quiero recorrer toda lista lo que voy a hacer es un filtro y voy a escoger Java. Bajo un poco y aquí está Java.

[03:55] Filtro lo que tengo para Java va y vemos que aquí en la primera opción tengo la librería de Auth0. Auth0 es una compañía que se especializa en proveer plataformas de autenticación de validación de la identidad del usuario. Fue comprada Okta hace poco, pero hasta hace un poco menos de un año era una compañía independiente, una compañía de Argentina muy respetada en toda la industria.

[04:23] Ellos hacen colaboraciones siempre para el mundo open source, para la comunidad. Una de las colaboraciones es una librería para generar JSON Web Tokens. Entonces vamos a utilizar este de aquí, es la primera opción, al día de hoy estamos febrero del 2023.

[04:41] Para descargar la librería donde yo voy a ir es a la fuente del repositorio, es donde voy a dar clic en view repo y me va a llevar al repositorio en GitHub. ¿Qué va a pasar aquí en GitHub? Aquí siempre en todo repositorio tienes la nota del readme. Entonces en el readme tú vas a ver aquí que hay una sección de getting started que te va a dar alguna descripción sobre compatibilidad de Java con esta librería.

[05:09] Y también la información de cómo instalar esto en tu proyecto actual. Si estás usando Maven, te da el escape que estás usando de Maven. Si estás usando Gradle, te va a dar entonces la pieza de código que necesitas para implementarlo en Gradle.

[05:27] También te va a dar información de cómo crear un JWT, cómo verificar un JWT. No se preocupen, vamos a verlo poco a poco. Nuestro goal por ahora es integrar esta librería en nuestro proyecto. Entonces vamos a ver aquí el último release es de la semana pasada, pero normalmente los releases más recientes a veces presentan un tipo de bugs que son solucionados en los siguientes.

[05:56] Para tener una versión más estable yo voy usar una versión menor que sería la 4.2.0. ¿Cómo voy a seleccionar esto? Voy a copiar acá, regreso a mi proyecto y entró a mi pom.xml. Nuevamente así como adicioné la dependencia de la librería de Spring Boot doy enter y agrego la de Auth0 Java JWT, pero con la versión .2.

[06:22] Por favor, usen esta versión ustedes también porque ya saben que entre versiones pueden haber algunos cambios y quizás los ejemplos que yo use aquí ya no funcionen en la nueva versión. Vale la pena recalcar que en esta librería como ya les comenté antes no es propia del ecosistema de Spring. Al igual que el Longbok, por ejemplo esta es de un proveedor independiente en este caso Auth0.

[06:47] Mi servidor está detenido. Voy aquí a Maven y voy a descargar esa dependencia nuevamente. Vemos que está resolviendo mis dependencias aquí, ya terminó y ahora miren cómo parece aquí, com.auth0:java-jwt:4.2.0. Ya con esto ya estamos listos para comenzar a generar nuestros tokens en el formato JWT. Eso lo vamos a ver en el siguiente video.





															03 Generando un jwt
															
Transcripción
[00:00] Bien, ahora ya tenemos la libería instalada en nuestro proyecto, vamos a comenzar creando un servicio para generar nuestros tokens en JWT y aprender, pues como implementarlos en nuestro código.

[00:13] Para eso como ustedes ya saben, voy a crear una clase llamada TokenService. No la voy a agregar aun al Git. Bueno, aquí es service para que Spring lo escanee como un servicio y aquí lo que yo voy a hacer es crear un método llamado public String generarToken() Y por ahora sin parámetros. Y aquí yo debo retornar alguna cosa.

[00:40] No voy a hacer nada. ¿Por qué? Porque yo no sé cómo usar esta librería de Auth0. Auth0 es el proveedor, pero yo no sé cómo usarla aún. ¿Qué puedo hacer para eso? Aquí en la documentación de la librería, en el repositorio de GitHub como lo pueden ver aquí, tenemos la parte instalación y cómo lo vimos en el video anterior, tenemos la parte de cómo crear un token JWT y nos da una pieza de código que la podemos usar como ejemplo, como inspiración.

[01:09] Bueno, lo que yo voy a hacer es copiar este código y voy a entrar aquí. Entonces lo pego aquí, voy a importar, me está pidiendo por ejemplo la clase Algorithm de Auth0, ya lo estoy importando.

[01:26] Vemos que el algoritmo que está usando esto es un algoritmo RSA256, que lo que usa es una llave pública y una llave privada para hacer el proceso de firma del token. Entonces yo no quiero usar mi llave pública ni privada porque no las he generado. Para los que no son muy familiares con esto, una llave pública, una llave privada son digamos dos strings criptografiados con el cual yo comparo la validez de un token.

[01:57] Por ejemplo todo lo que sea firmado con la llave pública puede ser decodificado con la llave privada y viceversa. Entonces es un proceso de generación de llaves, no quiero entrar en detalles por ahora en esto, no lo voy a usar.

[02:10] Como no voy usar esto, yo voy a cambiar el tipo de algoritmo por un algoritmo poco más sencillo que es un HMAC256. Ese algoritmo lo que me pide en lugar de dos llaves de un key pair, dos llaves de seguridad me pide un string a arreglo de bytes. Yo le voy a dar string que es lo más fácil, que es el secret.

[02:34] El secret viene a ser como digamos la contraseña para decodificar este token. No para decodificar el token en sí sino para validar la firma. Para validar que este toklen, por ejemplo es el secret de voll.med, es del 1 al 6, entonces ese token puede ser validado si el receptor conoce esta firma. Ya lo vamos a ver más adelante.

[02:57] Vamos a importar esta libertad de JWT de Auth0, porque había dos, una es de Spring, una es de Auth0, importamos la de Auth0. Importamos este exception y para que no quede el catch vacío, lo cual es un anti patrón, vamos a darle un throw new RuntimeException() solamente para no dejarlo vacío. Aquí tú puedes poner un logger, lo que creas conveniente.

[03:24] Para nuestro caso solamente un catch vacío. No está compilando porque tenemos que retornar algo, nos pide un string. Tenemos que retornar un string que sería este de aquí. Yo voy a borrar esto y aquí le voy a dar un return y con esto ya tengo mi código listo.

[03:42] Una observación aquí, es de muy mala práctica tener secrets, y por secrets me refiero a llaves criptográficas, a contraseñas, API keys o lo que sea, en el código hardcodeadas, es muy mala práctica porque esto eso nunca debe ser compartido en ninguna fuente de código.

[04:05] Existen diferentes formas de obtener los secrets. Vamos a ver más adelante, pero por ahora por fines didácticos lo vamos a dejar así. Vamos a explorar un poco aquí sobre los parámetros del JWT. Aquí me dice JWT.created. Lo va a cargar con Issuer. Issuer es el que emite el JWT, en este caso por defecto llegó a Auth0, pero como este token no lo va a emitir AUth0 sino lo va a emitir “voll med”, vamos a decirle “voll med”.

[04:35] Y también vamos a decirle que va dirigido, entonces vamos a ponerle .withSubject()y por ahora vamos a hardcodearlo a “diego.rojas” Esto va a ir hardcodeado, la idea es hacerlo dinámico más adelante.

[04:51] Guardamos y vamos a probar si de verdad está funcionando nuestro método. Venimos aquí, mandamos el request, vemos que funciona. No devuelve nada, porque aún no llamo al token service desde mi controller. Entonces, lo siguiente que tenemos que hacer es entrar aquí a AutenticacionController.

[05:40] Voy a darle aquí un private TokenService. Vamos a importar el TokenService que hemos creado nosotros, porque hay dos. Uno es de Spring, otro es el que acabamos de crear. Importamos el nuestro y aquí lo que vamos a decirle es token = tokenService, esto no de aquí sino la instancia, tokenService.generateToken();

[06:09] Y aquí vemos que nos está dando un error porque token ya fue declarado. Lo que yo voy hacer para darle un mejor entendimiento a mis variables, voy a renombrar. Esta, voy a refactorizar aquí a authenticationToken, este de aquí va a ser mi JWTtoken. Mismo proceso, renombramos JWTtoken.

[006:38] Y entonces con el JWTtoken, lo que yo voy a retornar aquí en mi body el token que acabo de crear. Ya no necesito el build. Guardamos. Limpiamos esto de aquí, vamos a ver si va a funcionar, si nos va a retornar el token en efecto, esperamos aquí, vemos que mi servidor ya reinició, venimos aquí y ejecutamos.

[07:04] Vemos que me está dando un internal server error. Esto es quizá, porque aún no recarga, vamos a ver qué es lo que está pasando aquí. Venimos acá y me va a decir que no puede porque this tokenService is null. ¿Esto es por qué? Aquí me faltó un @Autowired. Ya tenemos el @Autowired.

[07:23] Guardamos, limpiamos nuestra terminal, nuestro tokenService está marcado como service, entonces no va haber ningún problema esta vez. Vemos que ya cargó, lanzamos y vean aquí lo que recibimos ahora. Ahora estamos recibiendo nuestro token en formato de JWT y vamos a validarlo. ¿Cómo lo validamos?

[07:49] Entramos aquí al sitio web de JSON web token, vimos que tienen los datos por defecto y el token que tú ves aquí lo que vas a hacer es borrarlo, y vas a pegar el que te acaba de generar tu propio API.

[08:01] Y en efecto miren aquí, tienes el tipo JWT con el algoritmo que hemos elegido el 256, y la información que hemos puesto aquí, el subject, o sea el usuario a quien va dirigido “diego.rojas” y el issue es “voll med”.

[08:21] En este caso de la firma me dice que es invadida porque esto está vacío, pero por ejemplo si yo pongo 123456, vamos a ver que la firma entonces ya pasa a ser verificada. Ese es el propósito del secret, verificar la firma. Entonces ahora ya sabes que el token realmente fue emitido por voll med.

[08:46] Entonces esto es alto nivel cómo funciona la librería de Auth0 JWT, pero aquí hay algunas cosas que tenemos que mejorar. La primera es que esto tiene que ser dinámico porque no todos los usuarios son Diego Rojas y esto no puede estar en el código porque es un secret y ya vimos que es muy mala práctica tenerlo aquí dentro del código. En el siguiente video vamos a ver cómo aplicar mejoras a este código. Nos vernos.







															04 Ajustes de generación en jwt
															
															
Transcripción
[00:00] Ya tenemos nuestro token generado. Si venimos aquí, vas a ver que cuando le des a login, cuando entres al endpoint de login con tu credencial, este va a generar este token JWT, porque ahora está haciendo hardcodeado digamos con algunos valores por defecto que le estamos poniendo aquí. ¿Cuál es el objetivo ahora?

[00:22] Hacerlo dinámico porque no todos los usuarios van a tener el mismo subject, el mismo username. Entonces si lo quiero hacer dinámico, yo voy a crear aquí un parámetro del tipo usuario, porque quiero que cada token tenga los datos personalizados de cada usuario. Y aquí, por ejemplo en el subject lo que yo le voy a decir es que el usuario.getLlogin que me va a dar el username y también quiero devolver el id del usuario para mi cliente.

[00:50] Digamos que es un requerimiento del negocio que la aplicación cliente conozca el id de usuario. Aquí lo que yo puedo hacer es ponerle aquí .withClaim, y lo que yo voy a poner aquí es “id” seguido de usuario.getId() y listo. ¿Qué más puedo poner? En el token es muy común que tenga una fecha de validez, un tiempo de validez.

[01:23] Pueden ser dos horas, pueden ser dos minutos, puede ser un día entero, un año, no es recomendado, pero también hay. Entonces dependiendo en tiempo de validez, tú puedes ponerle que expire en cierta hora, por ejemplo aquí le voy a poner que expire en. Y aquí yo tengo que crear un instant.

[01:41] Para crear el instant, lo que yo le voy a decir aquí es crear un método que me retorne un instant, vamos a hacer un private Instante de Javatime, y aquí le voy a decir generarFechaExpiración. Y aquí lo que yo voy a retornar es un localDateTime porque yo le voy a agregar solamente dos horas de validación.

[02:21] Entonces vamos aquí. Le voy a decir que de un LocalDateTime de ahora, plus quiero que tenga más, plusHours(2).toInstant y de la zona que sea (ZoneOffset). Y vamos a ponerle un offset de Sudamérica que creo que sería de “-05:00” horas me parece. Vamos a ver.

[02:59] Y listo. Entonces cuando estoy, yo le voy a decir aquí que me genere la fecha de expiración. Si quieres hacerlo más dinámico tú le puedes enviar aquí el número como parámetro y automáticamente le puedes cargar dos, tres horas, eso ya depende de ti.

[03:18] Por ahora vamos a decirle que me genere esta fecha automáticamente porque el token va a expirar después de dos horas. Entonces, dependiendo del tiempo de hoy día más dos horas y listo. Y vamos a dejarlo ahí por ahora.

[03:33] Vamos a ir ahora a nuestro AutenticacionController porque tenemos que enviarle un parámetro del tipo usuario a este método, ¿cómo hacemos ahora? Lo que vamos a hacer es declarar en una variable aquí, var usuarioAutenticado. Este usuarioAutenticado va a salir si es que esta autenticación es exitosa.

[04:01] Vengo aquí y le voy a decir que de aquí me dé el principal, usuarioAutenticado.getPrincipal(). El principal viene a ser el objeto, el usuario que ya fue valga la redundancia, autenticado en nuestro sistema.

[04:13] Para que compile mi código lo que tengo que hacer aquí ahora es castearlo. Voy a castear a mi objeto usuario y ya no debería haber ningún problema. Yo le estoy diciendo que este usuarioAutenticado, este principal es igual a mí objeto usuario, que yo tengo en mi modelo.

[04:29] Esa sería la primera condición que yo tengo para mi generación de token. Entonces voy a probar aquí, voy a enviar, generó mi toquen y yo lo que quiero hacer ahora es verificar si la información que yo había agregado es visible y miren aquí. Vemos ahora que en efecto es el mismo subject, pero ahora tiene mi id de usuario.

[04:57] Por lo tanto sí lo obtuvo dinámicamente y la fecha de expiración, es el 22 de febrero a las 08:44, en este momento son las 06:44 entonces sí, en efecto son dos horas más que le ha dado de validación. Listo ya tenemos la primera parte de nuestras mejoras para nuestra generación de tokens listas. ¿Qué más nos falta?

[05:24] Yo no quiero recibir esto solo como un string, porque hasta ahora en nuestro API lo que estamos haciendo es consumir DTO y devolver DTO. Entonces para eso lo que yo voy hacer aquí es que me devuelva un new DatosJWTToken(). Es mi DTO que yo estoy creando. Y para esto yo voy a crear mi DTO que está aquí.

[05:53] Le voy a mandar como parámetro el JWTtoken y voy a crear este record. Y lo voy a crear dentro de mi paquete de seguridad, no lo voy a hacer ahora, voy a venir aquí, api.infra.security. Listo. Le damos okay. No lo voy a agregar aun, y automáticamente me está agregando la variable que le he mandado. Es un String y listo.

[06:26] Vengo aquí, guardo para ver cómo lo va a formatear ahora. Esperamos un poco que responda mi servidor. Listo y vamos a venir al token otra vez. Y ahora como pueden ver mi respuesta ya llega formateada en un JSON, ya viene mi JWTtoken correctamente formateado con el mismo token que yo retorné anteriormente, pero en formato más amigable.

[07:00] Siempre recuerden esto. Si en todo tu API y el estándar es consumir DTO y devolver DTO, eso debe aplicar para todos los métodos que estás usando. Es para mantener tu código limpio y mucho más entendible también para tu aplicación cliente a veces consumir el string directamente no es tan fácil que digamos.

[07:19] Último punto que les quiero mostrar. Este token service tiene hardcodeado un secret y yo ya les comenté que esto es un anti-patrón, es una pésima práctica que no deberían hacer nunca porque hay casos en la vida real que se filtran credenciales, se filtran claves de acceso, incluso hasta para Amazon en la cual bueno, si tienes tus credenciales comprometidas, pueden comprometerte las cuentas.

[07:51] Es así como muchas veces los hackers se hacen de las credenciales de un usuario, ni siquiera las piden. Son los mismos errores, que uno comete cuando programa que las comparte sin darse cuenta. Lo que vamos a hacer ahora entonces es declarar un valor aquí en nuestro application.properties.

[08:11] Quizás esto es nuevo para ustedes, pero hasta ahora hemos sobrescrito propiedades propias de Spring para darle un comportamiento diferente al que viene por defecto en nuestro API. Yo aquí también puedo definir propiedades creadas por mí, por mi aplicación por eso son application.properties.

[08:32] Por ejemplo, lo que yo puedo crear aquí es decirle que de mi api.security el secret va a hacer igual a 123456. Entonces mi api.security.secret es del 1 al 6. Lo que voy a hacer ahora en mi token service es consumir ese valor de ese property. Para eso yo voy a crear aquí un String apiSecret; y este apiSecret va a darme ese valor aquí y listo.

[09:16] Con eso podría funcionar pero ahora ustedes me dirán: “Diego, pero este archivo de aquí también se comparte en el código fuente tú estás mandando el problema de este lado a este lado y estamos en lo mismo”. Y sí, si pensaron en eso felicidades también porque en efecto aquí no estamos solucionando nada. [09:39] Una de las técnicas para evitar hacer esto es usar variables de ambiente. ¿Qué son variables de ambiente? Son variables que existen en tu sistema. Por ejemplo ahorita yo estoy en mi computador, en mi computador personal y yo no tengo ninguna variable de ambiente todavía personalizada expuesta.

[10:00] Pero digamos una vez que lo despliegues en el servidor de test, en producción, User accept, en cualquier ambiente que despliegues tu aplicación lo más probable es que tengas tus variables inyectadas ahí, sobre todo si estás usando Docker o Kubernetes, es muy fácil inyectarle variables en el container y esas variables pueden tener como valor el string que tú deseas que sea el secret.

[10:25] Por ejemplo, podría ahorita entrar a mi terminal, venir aquí y decirle que me exporte la variable JWT_SECRET=123456. Le doy export y si yo le hago un eco a esta variable JWT_SECRET, entonces me va a dar en 123456. Esa variable ya existe aquí en mi computador porque yo la acabo de crear.

[10:54] Lo mismo tú puedes hacer en tus otros servidores. Entonces de la misma forma que yo lo llamé acá, como la he exportado con este nombre, yo le voy a decir ahora que quiero la variable, se duplicó JWT_SECREAT. Porque esta es mi variable de ambiente que yo estoy usando. Voy a darle guardar.

[11:14] Voy a detener un rato mi servidor para que cargue la propiedad después nuevamente, voy a darle iniciar, vamos a esperar un poco. Mi aplicación ya inició y yo voy a llamar aquí mi servicio y vemos que me dio un internal server error 500. ¿Y cuál es el error que me está dando?

[11:40] Lo que me está diciendo es que el secret no puede ser null. ¿Esto por qué? Si bien yo he declarado aquí mi secret, yo en mi tokenService no he inicializado este string. Y si yo deseo obtener el valor de este string desde mi archivo de propiedades, lo que yo hago es copiar esto. Voy a copiar mi valor de la propiedad.

[12:08] Voy a tokenService y con la anotación, aquí no. Con la anotación @Value, yo voy entre comillas, abro signo de dólar, abro llaves y le voy a llevar aquí el valor de mi propiedad de la cual yo quiero extraer ese valor para mi apiSecret. Voy a guardar nuevamente allí. Borro mi terminal y esperamos un momento.

[12:37] Como pueden ver entonces si yo declaro esta propiedad aquí, incluso el IDE ya me ayuda porque como ya está siendo usada, ya no está subrayado en amarillo. Simplemente él ya relacionó que va a ser usado aquí en esta parte de mi código. Voy a llamar nuevamente mi endpoint, voy a hacer otra vez el llamado porque no está conectando. Vamos a ver, a mí me parece que salió una excepción por aquí.

[13:04] ¿Qué es lo que dicen? Que no puede resolver el placeholder “JWT_Secret” en “${JWT_SECRET}”. ¿Esto por qué? Porque quizás mi IDE, mi aplicación no tiene acceso a mis variables de entorno de mi sistema.

[13:18] Y cuando sucede eso por ejemplo, cuando tú no puedes obtener ese valor de tu variables de entorno, tú puedes definirle un valor por defecto, por ejemplo, 123456. De esta forma yo tengo la variable entorno de mi computador, pero como mi IDE no tiene acceso a esas variables de entorno, entonces lo que él me dice es: “Yo no sé qué variable es esta”.

[13:42] Y eso te puede pasar también en algún ambiente de producción, en algún ambiente de test, es un error común. Para esos casos, por defecto en mi ambiente de desarrollo que es este de aquí, yo le estoy poniendo un valor por defecto, que es el mismo, en este caso voy a guardar, vamos a limpiar aquí.

[14:00] De modo que si no encuentra esto, por defecto va usar este valor de aquí. Y eso soluciona todo mi problema, esperamos que recargue. No sé si recargó. Ahora sí, recargó mi servidor. Entro aquí, vamos enviarlo y vemos que ya está funcionando nuevamente mi servicio con el valor obtenido directamente desde mi archivo de propiedades.

[14:26] De este modo digamos, que si yo tengo un JWT_SECRET exclusivo para producción y debería ser así el estándar, entonces ya no está compartido en mi código y esto de aquí, simplemente es un valor por defecto para ser usado en mi entorno de desarrollo y mis pruebas.

[14:43] De esta forma concluimos la cuarta clase y su curso hemos visto ya como obtener, cómo implementar la librería de Auth0 para nuestro propio JWT. Hemos aprendido también a consumir el usuario autenticado de nuestro proceso de autenticación hecho por el AuthenticationManager de Spring.

[15:03] Sin más que decirles, practiquen mucho esto. Este tópico suele ser de los más solicitados en el mundo laboral si tú eres familiar con técnicas de autenticación o autorización de datos, entonces estudia bastante esto.

[15:20] En la siguiente clase vamos a culminar con lo que es autorización en sí, porque si venimos a nuestro cliente, ya generamos el token pero aún así por ejemplo si yo voy a listar mis médicos, le voy a dar clic y sigo accesando a mi listado de médicos. Yo necesito desde ahora decirle a todos mis otros endpoints, por si acaso si el request no lleva este token que es válido en el header, entonces recházalo, que eso ya sería la parte de autorización. Pero eso es tema de la clase número 5. Nos vemos.







																 05 Para saber más: otra información sobre el Token
PRÓXIMA ACTIVIDAD

Además del Issuer, Subject y fecha de expiración, podemos incluir otra información en el token JWT, según las necesidades de la aplicación. Por ejemplo, podemos incluir el id del usuario en el token, simplemente usando el método withClaim:

return JWT.create()
    .withIssuer("API Voll.med")
    .withSubject(usuario.getLogin())

    .withClaim("id", usuario.getId())

    .withExpiresAt(fechaExpiracion())
    .sign(algoritmo);COPIA EL CÓDIGO
El método withClaim recibe dos parámetros, el primero es un String que identifica el nombre del claim (propiedad almacenada en el token), y el segundo la información a almacenar.






																08 Lo que aprendimos
PRÓXIMA ACTIVIDAD

¿Qué hemos aprendido?

En esta clase, aprendiste a:
Agregar la biblioteca Auth0 java-jwt como una dependencia del proyecto;
Utilizar esta biblioteca para generar un token en la API;
Inyectar una propiedad del archivo application.properties en una clase administrada por Spring, usando la anotación @Value;
Devolver un token generado en la API cuando un usuario se autentica.





