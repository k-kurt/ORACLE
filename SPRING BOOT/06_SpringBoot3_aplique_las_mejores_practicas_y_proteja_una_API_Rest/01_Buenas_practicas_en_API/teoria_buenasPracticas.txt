


																01 Presentación
																
Transcripción
[00:00] ¿Qué tal? Bienvenidos a su curso Spring Boot: Aplique las mejores prácticas y proteja un API Rest. Como ya me conocen, yo soy su instructor Diego Rojas y este curso vamos a hacer digamos la continuación de donde dejamos en la última parte del curso Rest API.

[00:18] Vale recalcar que si bien el curso anterior no es un prerrequisito para llevar este curso varios de los conceptos básicos que hemos aprendido ahí van a ser reutilizados en este curso y así también como el proyecto anterior que hemos desarrollado.

[00:33] Como para dar un pequeño vistazo así a alto nivel de lo que vimos en el curso anterior, descubrimos cómo es la creación de un API Rest. Ya sabemos cómo obtener parámetros del body, de la URL, sabemos lo que es un query param, path param, pero quizás no con las mejores prácticas. Entonces ahora vamos a profundizar un poquito más ahí.

[00:52] Vimos lo que es un CRUD: create, read, update, delete, entonces ya estamos familiarizados cómo son estas operaciones básicas en Rest, sabemos lo que son validaciones y paginación y orden para entregar los datos a la capa cliente.

[01:08] Esto es donde dejamos en el último paso. ¿Cuál es el siguiente paso? Los objetivos para este curso son aprender las buenas prácticas en la creación de API, porque si bien ya sabemos cómo manejar y controlar los datos que llegan y devolvemos en API, no estamos aún alineados con las mejores prácticas usadas en el mercado.

[01:29] Existen ya estándares que hacen digamos que cuando escribes un API, no importa el lenguaje en que lo hagas, digamos que es universal. Son como ya estándares predefinidos, buenas prácticas en lo que es HTTP, Rest, etcétera. Vamos a aprender tratamiento de errores porque obviamente no todo es perfecto y tenemos que estar preparados para los errores que puedan venir.

[01:50] Vamos a aprender conceptos nuevos y muy importantes que son autenticación, autorización que son actualmente parte de lo que es seguridad informática. Estos son skills altamente demandados en el mercado hoy en día, entonces estoy seguro que no se van arrepentir, y también tokens JWT, que al final son estándar dentro de lo que se refiere autenticación, concepto de seguridad en información.

[02:17] Ahora, el proyecto que vamos a desarrollar es el mismo proyecto en curso anterior. Vamos a continuar con nuestro voll.med y sobre eso vamos a implementar las buenas prácticas, vamos a dejar bien segura sesa API y bueno, sin más que decir, vamos.





En este curso, usaremos el mismo proyecto que se completó en el primer curso de Spring Boot. Puedes obtener una copia del proyecto desde este repositorio de GitHub:

Proyecto inicial	https://github.com/alura-es-cursos/1952-spring-boot-3-rest-api/tree/clase-5
Además aqui tienes los slides(presentaciones) que se utilizarán durante este curso.






														03 Estandarizando retornos de API
														
														
														Transcripción
[00:00] Bien. Comencemos. Lo primero que tenemos que ver es que ya basado en lo que hemos hecho en el proyecto anterior, esta es una colección de request de Insomnia, que nos quedó de ahí.

[00:13] Insomnia, para los que están comenzando a ver este curso directamente, es el cliente, el aplicativo que simula ser un cliente para nuestro API, similar a Postman. Bueno, lo que tenemos hasta ahora, ¿qué es? Es un registro, un listado actualizar y un delete de médicos.

[00:30] Vamos a comenzar a ver algunas cosas que tienen en común, por ejemplo, el registrar médicos, vemos que la URL es exactamente la misma que el listado y la URL listado es la misma que actualizar. Y en el caso del delete, lo único que se le agrega es un parámetro más, en este caso, que es el id del médico. ¿Ahora por qué?

[00:50] Porque en Rest por más que tenga la misma URL, lo que manda es el verbo o método HTTP que tú quieras utilizar para interactuar con este recurso. Y sí, dije recursos porque en Rest la referencia que tenemos en los URLs son todas a nivel de recurso.

[01:12] Por ejemplo, aquí yo estoy diciendo en este dominio localhost:8080, mi servidor de mi máquina local, hace un post, o sea mándale un médico en este recurso médicos. Vamos a estar diciéndole: “Guárdame este recurso médico en los recursos de médico que tiene mi máquina actual.”

[01:34] En el caso de get, lo que estoy diciendo es “Dame todos tus recursos médicos”. Para actualizar es lo mismo y para el delete es aun más entendible porque básicamente borra de tu recursos médicos este recurso que tenga el id 7. Esas son unas particularidades de Rest.

[01:57] Primero, los métodos HTTP definen el tipo de operación que vas a realizar, segundo, la URL puede ser la misma, no hay ningún un problema si el método diferente. Y tercero tienes que referirte a recursos cuando hablas de rest services. ¿Qué más tenemos aquí? Algo muy curioso.

[02:17] Si vemos aquí en la mano derecha, aquí en verde, tenemos un código 200 que dice es el mismo para el update, el mismo para el listado y el mismo para el registro. ¿Qué significa el 200? 200 te dice la operación fue exitosa. Pero hay diferentes tipos de retorno que tenemos que aprender a hacer con Rest. ¿Por qué?

[02:40] Porque si bien yo sé por ejemplo que cuando yo guardo este médico, me da un 200 okay, yo necesito en realidad por buena práctica retornarle algo a mi cliente para que sepa que la operación fue exitosa, por ejemplo, hay un código http específico para cuando creas objetos que es el 202.

[03:00] Hay un código http específico para cuando realizas una operación y no retornas nada, que es el 204, es el no content. Entonces ese tipo de operaciones no necesita ser 200 necesariamente. Quizás el actualizar sí está okay, retornar un 200, pero para un delete, lo más apropiado sería retornar un 204.

[03:25] Significa que la operación fue exitosa pero no hay contenido que retornar porque hiciste un delete. Entonces esta es hora de ir al código, vamos a poner manos a la obra para recordar lo que vimos y por ejemplo aquí está nuestro método delete. Vemos que está nuestro id, actualizar, es lo mismo que hemos hecho en el curso pasado, no se preocupen.

[03:49] Y lo que yo voy a hacer ahora es actualizar este método para que me retorne algo, porque yo deseo tratar este código de HTTP. Yo quiero retornar algo diferente, ¿pero cómo lo hago? Para eso Spring ya nos ayuda a retornar códigos ya más personalizados para que nuestra llamadas sean más personalizadas.

[04:08] Primero que todo tengo que cambiar el void, porque si bien el void, para los que son más puristas en Java, si bien el void retorna, no hay ningún problema, tú puedes retornar, es indiferente, no retorna en realidad nada al cliente, no retorna nada de valor en sí, simplemente retorna porque sale del método y listo.

[04:33] Pero en este caso yo quiero retornar un código HTTP, que es el 204. Para eso voy a usar la clase ResponseEntity de Spring. Y ahora sí me está dando un error de compilación. ¿Por qué? Porque si yo estoy declarando mi método ResponseEntity yo tengo que retornar un ResponseEntity.

[04:52] Y entonces aquí le voy a decir ResponseEntity. y ResponseEntity me da una serie de métodos estáticos. Vamos a darles un vistazo. Tenemos ok, noContent, accepted, badRequest, created, internalServerError, notFoud. ¿Se les hace familiar?

[05:10] Exacto. Son los códigos HTTP, los códigos de retorno HTTP que necesitamos. Por ejemplo, si yo le doy aquí un noContent internamente Spring va a mapear la respuesta que yo quiero y debería retornar un 204 a mi cliente. Vemos que no está compilando. ¿Esto es por qué?

[05:33] Porque para que retorne necesito darle un build, porque este método estático lo que va a generar internamente, va a setear el código de HTTP, pero necesito convertirlo con build a un ResponseEntity. Esto debería ser todo por ahora. Entonces voy a ejecutar mi servidor. Voy a ascenderlo y voy a juntar algún request para eliminar algún médico, vamos a ver qué médicos tenemos primero.

[06:03] Regreso a Insomnia, voy listar mis médicos. Quiero ver cuáles tengo. Tengo id 8 y 9. Entonces aquí en el delete le voy a decir: “Bórrame el médico con el id 8”. Le voy a dar send y ahora sí fíjese: 204 No Content. Y bueno, y eso mismo nos facilita una explicación acerca de qué es lo que significa este método.

[06:31] Ya de esta forma entonces ya estamos customizando, personalizando más nuestras llamadas HTTP. Vamos a ver este método de aquí arriba, el de actualizar médico. De igual forma yo deseo retornar algo, deseo retomar 200 pero por buena práctica de HTTP, de Rest, yo necesito retornar el objeto que acabo de actualizar.

[06:51] ¿Esto qué significa? Que este médico que yo actualizado, este de aquí, yo tengo que retornar sus datos, ¿cómo voy a hacer eso? Bueno, yo ya tengo mi médico acá, voy a actualizar los datos al médico, como es un transactional lo que él va a hacer es convertirlo en la base de datos, todo bien hasta ahí, y ahora yo necesito retornar es un responseEntity.

[07:16] Entonces, ResponseEntity, y vemos que ahora necesito retornar, voy a dar un return ResponseEntity.ok, porque yo he desarrollado un estado 200 que es ok, y aquí le puedo mandar médico, y como esto debe ser suficiente. ¿Pero cuál es el problema? Yo ya les expliqué que no es bueno retornar directamente la entidad de la base de datos.

[07:43] Recuerdan eso. Y este médico es la entidad de mi base de datos. ¿Qué es lo que yo tengo que hacer para evitar eso? Exacto, crear un DTO, o en todo caso un Java record aquí que haga el papel de DTO para interactuar con mi capa cliente. Aquí yo ya tengo creado un DTO llamado DatosRespuestaMédico, que lo tengo ya listo para evitar crearlo desde cero aquí otra vez.

[08:08] Y los parámetros que tiene son los mismos que tiene el médico: id, nombre, e-mail, teléfono, etcétera, y aquí tenemos lo mismo, es tal cual el mismo médico. Entonces con eso, ya tengo mi DTO para retornar. Aquí, ¿qué tengo que hacer ahora? Darle un new DatosRespuestaMedico y aquí voy a ir seteando uno a uno los valores que debería tener mi médico para retornar.

[08:43] Para fines de hacer este video un poco más rápido y no tener que copiar todo, yo tengo aquí ya el código listo para retornar el médico. Darle un vistazo, es lo que ustedes ya conocen del curso anterior: DatosRespuestaMedico con id, el nombre, email y en la dirección, he obtenido la dirección, la calle y bueno, todos los parámetros que ustedes ya conocen, son familiares con esto.

[09:07] Entonces ahora el método compila bien, porque tengo mi médico, lo actualizo y después lo que retorno son dos datos de mi DTO de mi médico. Voy a guardar aquí, voy a esperar que compile mi código nuevamente, vemos que está un put. Y regresamos aquí. Voy a listar mis médicos nuevamente para saber cuál quiero actualizar.

[09:33] Este el único que me queda con id 9. Betty Fleck, por ejemplo, voy a actualizar los datos de Betty Fleck. Entonces, en actualizar médico le voy a decir que nombre va a ser “Betty Updated” por ejemplo, solo para diferenciarla muy bien. Y el id era el id número 9.

[09:56] Entonces voy a venir aquí, voy a decir 9, lo voy a enviar. Me da 200 OK, y observen ahora que sí estoy obteniendo como respuesta la información de Betty, Betty Updated, el correo que tiene Betty, todo lo demás que no fue actualizado, pero ya este método ya me está retornando primero el código HTTP, que fue exitoso y también ya me está retornando el body del nuevo objeto, que ya existe a nivel de base de datos.

[10:30] ¿Por qué? Porque ya no me retorna Betty Fleck, ahora me retorna Betty Updated, a ver, entonces esto es solo el inicio, porque aún tenemos dos métodos más que tenemos que actualizar, que son el listado de médicos y el registro de médicos, pero eso es tema del siguiente video. Nos vemos.





																04 Devolviendo el codigo 201
																
Transcripción
[00:00] Bien, ya vimos cómo actualizar correctamente siguiendo las buenas prácticas de Rest un objeto. Vamos con el siguiente que es el post. Vamos a guardar un nuevo recurso médico en nuestra base de datos.

[00:14] El post tiene una curiosidad y es que tiene que recordar un código específico, que es el 201, que es created. Entonces primero que todo voy a poner aquí, debo retornar 201 created, pero Post también debe retornar algo y esto es por la especificación que tiene Rest. Y esto no es solo para Spring, esto es para cualquier tipo de API, es algo universal, es un estándar.

[00:46] Rest una vez que crea el objeto, por ejemplo, si yo registro mi médico, yo debería retornar en un header la URL donde tú puedes encontrar este médico. Entonces donde encontrar al médico. ¿Por qué? Porque por buena práctica, si ya está todo guardado en la base de datos, yo te voy a retornar una URL que en este caso puede ser http://localhost:8080/medicos y el id del médico que ya está guardado.

[01:21] Entonces con un método get tú deberías ser posible de acceder al médico que acabamos de guardar. Entonces esto es lo que tenemos que hacer ahora para digamos cumplir con las buenas prácticas de Rest para el método post. Vamos a comenzar.

[01:41] Voy a borrar esto, y comienzo aquí como siempre, reemplazando void por ResponseEntity. Tengo aquí mi ResponseEntity y lo que tengo que hacer ahora, primero que todo, si yo quiero devolver el cuerpo del médico que he guardado porque tengo que devolverlo también por estándar, entonces digo aquí Medico medico = médicoRepository con los datos que tiene aquí. Perfecto.

[02:10] Esto me va a devolver un objeto médico de base de datos, de entidad, y ya vimos que yo no quiero obviamente retornar el número de mi entidad de base datos. Yo quiero retornar mi DTO. ¿Qué hago? Le doy a datosRespuestaMedico, igualito, datosRespuestaMedico que sea igual a new datosRespuestaMedico, el médico que acabo de guardar como parámetro.

[02:38] Vemos que aquí hay un error. Y es porque estoy mandando la entidad completa y no los parámetros, entonces aquí voy a copiar el mismo código que ya tengo aquí, no voy a reinventar nada. Entonces vengo aquí y le doy datosRespuestaMedico, le borro un paréntesis que está de más y listo.

[03:03] Ya tengo mi DTO que está siendo creado con el médico que estoy guardando y todo bien. ¿Qué me falta? Me falta retornar: return ResponseEntity. Pero recuerden que no es 200, es 204. Entonces tengo que decirle que retorne un estatus created.

[03:26] Entonces va a decir created, pero si se fijan aquí, created me pide un URI location, o sea, el URL donde esté recurso va a ser encontrado. Entonces yo aquí lo que voy a hacer es crear una nueva URI llamada URL. Y para obtener está URL yo podría hacerlo de dos formas. Yo podría aquí hardcodear como decimos http://localhost:8080/medicos/ y aquí concatenarlo con + medico.getId(); por ejemplo, porque es lo que hay que retornar, getId.

[04:09] Funciona. Podría funcionar, eso lo puedo concatenar y mandarlo a transformar a URI, no hay problema, ¿pero qué pasaría si lo describe un servidor? Entonces ya no va a ser localhost:8080, va a ser el dominio de mi servidor. Para obtener esto Spring también me ayuda con una clase auxiliar, un helper para obtener los datos de mi servidor, y le voy a llamar aquí en los parámetros de este método.

[04:38] Esta clase de aquí es UriComponentsBuilder, voy a llamarlo aquí. Entonces, lo que yo voy a hacer aquí, voy a comentar esto porque esto no va a funcionar, voy a repetir este código de aquí, mi URI, y voy a decir uriComponentsBuilder.path, porque yo necesito mi path aquí, y va a ser “medicos/”.

[05:10] Y aquí viene otra cosa interesante porque yo no le puedo dar digamos un id fijo porque si no, todos los URL creados apuntarían a ese mismo id. Y esto tiene que ser dinámico entonces lo que hago es poner entre llaves y con el parámetro dinámico id, aquí termina mi path. Aquí están bien lo que yo le voy a poner aquí es buildAndExpand.

[05:38] Y aquí le voy a decir medicos.getId y finalmente toUri. De esta forma yo ya tengo mi URL creada y eso es lo que yo se lo voy a mandar aquí a created. Entonces voy a borrar esto porque que no me va a servir de nada mi código. Aquí yo estoy creando la URL dinámicamente, el recurso siempre va a ser el mismo, ese mismo recurso que tengo mapeado aquí, médicos, médicos, el id es dinámico porque se lo estoy mandando aquí con este método, esta clase.

[06:16] ¿Qué más me pide? Me está pidiendo un body aquí abajo, y el body obviamente va a ser mi datosRespuestaMedico. Y finalmente eso sería todo lo que tendría que hacer para devolver los datos de un médico que acabo de crear. Ahora, por ejemplo, vemos que aquí me está dando un warning en este ResponseEntity. ¿Esto por qué es?

[06:38] Porque ResponseEntity, si entramos a verlo, acepta un parámetro genérico. Eso quiere decir que yo puedo hacer mi código mucho más estandarizado u organizado, si yo le digo que este ResponseEntity lo que va a responder es un objeto del tipo datosRespuestaMedico.

[07:04] Con esto, yo le digo esto ResponseEntity solamente va a responder este tipo de DTO. Si yo le cambiara esto, por ejemplo por datosRegistroMedico, entonces me va a dar un error de compilación. ¿Por qué? Porque no es el DTO que espera.

[07:18] Entonces por buena práctica es bueno también especificar a nivel de ResponseEntity en el código qué tipo de objeto es el que yo espero retornar a mi cliente. También se vuelve un poco más seguro porque ya no hay tantos errores a nivel de prometemos estás hardcodeando y te equivocas de DTO por ejemplo.

[07:38] Bueno, vamos a guardar, ya no vamos a perder más tiempo hablando aquí. Tenemos la creación de DTO, está guardando. Si se dan cuenta no hay nada, no hay ciencia nueva aquí, es lo mismo que me visto, pero agregándole un poco más de detalles, que van a hacer este código mucho más entendible, mucho más fácil de leer porque está adaptado a los estándares de Rest y HTTP, venimos aquí y ahora voy a guardar un nuevo médico.

[08:06] A este lo voy a llamar “Alexis Sandoval”. Reemplazo aquí, Alexis Sandoval, y el número de documento que no puede ser el mismo, número de teléfono también lo vamos a cambiar y listo. Vamos a ver qué nos dice ahora. Vemos que nos dio un bad request. ¿Por qué?

[08:30] Vamos a ver qué es lo que nos dice. La validación falló para el argumento de aquí porque claro, el documento es mucho más grande que el que estamos aceptando en nuestra validación. Correcto. Entonces vamos a enviar otra vez y vemos aquí que recibimos el 201 created.

[08:46] Y vemos aquí todos los parámetros que hemos recibido, incluso el nuevo id de la base de datos. ¿Por qué? Porque este id fue auto generado por la base de datos y ya nos lo ha devuelto aquí pero la magia también está en otro lado. Por este lado tenemos los headers y aquí en los headers, tenemos algo muy interesante que quiero que vean y es esto de aquí.

[09:11] Esto de aquí es el header que les comenté donde nosotros podemos encontrar al médico que acabamos de guardar ahora, por ejemplo, yo voy ahora a crear. Voy a regresar aquí y voy a crear un nuevo request. Este va a ser un get y va a ser http://localhost:8080/medicos/10.

[09:33] ¿Por qué? Porque ese es el que yo acabo de guardar. Si le doy un enviar, me va a decir método no permitido, method not allowed y otro estado de error: 405. ¿Por qué es eso? Vamos a descubrirlo en el siguiente video.





																07 Detallando los datos de API
																
Transcripción
[00:00] Recibimos aquí en 405 método no permitido, pero en realidad esta URL también existe, vemos que es la misma que aquí que el delete, solamente que cambia el id. Y por ejemplo una cosa, que yo les comenté, es que la URL también depende del tipo de método http que yo use. Ahora ustedes podrán pensar: “A ver Diego, pero la URL existe, estamos llamándola aquí y no hemos implementado todavía este método con get”.

[00:34] ¿Entonces no debería dar un 404, not Found, que no existe? En este caso no, porque la URL sí existe. Por ejemplo, estoy usando una misma firma de URL, una misma firma el recurso, pero con un método diferente. Por lo tanto lo que acá me dice es que el método no está permitido porque mi back end no ha implementado ese método todavía. Entonces es por eso que yo recibo esta respuesta.

[01:02] ¿Qué es lo que toca hacer ahora? Implementarlo. Entonces venimos al código y vamos a crear un nuevo método. Para eso venimos aquí y como la firma y el método es muy parecida a la de mi método delete, yo voy a copiar este código, ya voy a borrar esto, no lo vamos a necesitar para este curso y lo voy a pegar. ¿Qué voy a hacer aquí?

[01:27] Primero que todo es un get, getMapping con id. Como es un get, no necesito transactional y voy a decir: retornaDatosMedico. ¿Por qué esto va a retornar los datos de un médico en específico? Nosotros ya estamos retornando los datos del médico en el listado, pero solo datos muy específicos, muy puntuales.

[01:52] Lo que yo quiero hacer ahora es retornar en sí todos los datos de un médico en particular. Para eso ya tengo mi medicoRepository, getReferenceById, no necesito hacer nada más, no lo voy a desactivar porque este método es un get, y lo que le voy a decir aquí es que devuelva un ok, pero si ven aquí, yo tengo dos tipos de ok.

[02:16] Tengo un ok que acepta un body, o sea que me acepta un parámetro y un ok que no me acepta nada. Entonces yo le puedo decir aquí que me resuelva un ok de médico y con esto sería suficiente. Pero nuevamente, yo no voy a retornar nunca objetos de mi entidad directamente. ¿Qué es lo que tengo que hacer aquí?

[02:38] Lo que puedo hacer aquí es simplemente decir datosMedico = aquí no es valor, aquí es var, datosMedico. Esto va a ser igual a new datosRespuestaMedico y como ya lo vimos acá, yo voy a copiar este código de aquí. Ya está. Y aquí en lugar de retornar médico, voy a retornar datosMedico.

[03:12] ¿Qué más voy a hacer? Aquí en lugar de ResponseEntity genérico le voy a decir que es un ResponseEntity de datosRespuestaMedico. Vengo aquí, guardo y guardo mi código. De esta forma vamos a ver que voy a borrar esta aquí porque no está compilando. Guardo acá.

[03:34] De esta forma ya tengo otro endpoint más para retornar los datos de un médico en específico. Vamos a ver si funciona. Entonces, voy a venir aquí. Voy a cambiarle el nombre aquí, voy a renombrado para obtener datos medico. Lo renombramos, perfecto, y le voy a dar un send y miren aquí.

[03:59] Ya me retornó los datos de Alexis Sandoval con código 200. ¿Esto qué quiere decir? Ahora tenemos un método más en la misma URL que ya es usada por el delete, pero con un verbo HTTP diferente. Y de esta forma, por ejemplo aquí en el Post, también, si guardamos otra vez otro dato en los headers que retorne ya va a estar disponible una vez que retorna este método, me retorne location, ya está disponible este endpoint para poder acceder a este recurso en particular a través del método.

[04:34] Volvemos aquí. A nivel de código lo único que nos falta aquí en todo caso es este listado, porque no estamos haciéndolo con ResponseEntity, entonces aquí la cosa ya es mucho más fácil porque ya conocemos ResponseEntity. ¿Qué tengo que hacer?

[04:52] ResponseEntity de estoy de acá, vengo aquí. Todo bien. ¿Y aquí qué le digo? ResponseEntity.ok ¿y con cuál body? Es con este body que yo estoy retornando aquí, en este caso no hubo nada, nada, nada nuevo, no hubo nada del otro mundo. Guardamos. Dejamos que reinicie el servidor.

[05:22] Aquí fue lo mismo, solamente que lo que estamos haciendo ahora es ponerlo dentro de un wrapper. Así es como se llama eso, ResponseEntity. Es un wrapper, es un envoltorio, una envoltura. Vamos a darle aquí, listamos y tenemos el ok con los dos registros que tenemos ahora, solo que ahora está este retorno, que es dentro de un wrapper con envoltura para nuestra request HTTP.

[05:50] ¿Qué les pareció? Se ve el código un poco más entendible, se entiende lo que queremos retornar y ya estamos más acorde a las buenas prácticas de Rest. Como siempre, practiquen mucho, cualquier duda en el foro y nos vemos en la siguiente clase.





																En esta clase, aprendiste a:

Usar la clase ResponseEntity, de Spring, para personalizar los retornos de los métodos de una clase Controller;
Modificar el código HTTP devuelto en las respuestas de la API;
Agregar encabezados a las respuestas de la API;
Utilice los códigos HTTP más apropiados para cada operación realizada en la API.
																