														
														
														
														02 Request PUT
														
Transcripción
[00:00] ¿Qué tal? Bienvenidos a la quinta y última clase de su cursos de Spring Boot API Rest. Hasta el momento ya hemos visto cómo crear registros en nuestra base de datos con el método post y como listarlos con un método get.

[00:18] Ya hemos visto también que si queremos comenzar a ver qué es lo que está sucediendo a nivel de queries en la base de datos, como por ejemplo los inserts, los selects, Hibernate nos puede ayudar imprimiendo pues las queries que son ejecutadas contra la base de datos.

[00:33] Ahora, al inicio de este curso dijimos que íbamos a ver un CRUD, un create, read, update and delete. ¿Qué es lo que nos está faltando? Exacto, los dos últimos, update and delete, y eso es lo que vamos a ver ahora. Vamos a comenzar con el update.

[00:50] Venimos a nuestro requerimiento, venimos a nuestro requerimiento sobre la actualización de médicos. ¿Y qué nos dice? La información permitida para actualizar sería solo nombre, documento y dirección. ¿Qué quiere decir esto? No puedes actualizar, por ejemplo, especialidad, ni email, ni teléfono, por reglas del negocio.

[01:11] Entonces bueno, perfecto. Ya sabemos que nombre, documento o dirección son los únicos campos que podemos actualizar. ¿Y qué más? Bueno, sería básicamente solo eso. Volvemos al código y a diferencia, por ejemplo, de lo que es un Request, como los que hemos visto en Insomnia, un get o un post, vamos a crear un nuevo request para la actualización a nuestro médico.

[01:37] Vamos aquí, igual http://localhost/medicos. Me faltó el puerto, perdón 8080. Perfecto. Pero a diferencia de los anteriores, este va a ser un tipo put. ¿Por qué? Porque yo voy a enviar un tipo de dato para actualizar otro tipo de dato.

[02:03] Entonces lo que se usa en ese tipo de métodos HTTP es put. Bien, entonces, si yo le doy a enviar, primero voy a iniciar mi servidor. Vamos a iniciar. Vamos a limpiar nuestra consola. Vemos que inició. Voy a enviar este request y me va a decir método no permitido. ¿Por qué? Porque aquí lo que me dice Spring es que el método put no es soportado actualmente y esto está bien.

[02:35] Recordemos que dentro de la misma URL yo puedo tener varios métodos HTTP, por ejemplo, vamos aquí al listado. Recordemos que estos query params son opcionales. Entonces yo puedo hacer simplemente la misma URL si se dan cuenta, pero lo que cambia es el verbo o método HTTP que yo estoy usando para ejecutar ese request, post para registrar, get para obtener y put para actualizar.

[03:04] ¿Qué más necesitamos hasta ahora? Bueno. Vemos que a diferencia de nuestro método para guardar un médico, por ejemplo, entonces venimos aquí en registrarMedico, nosotros le mandamos un datosRegistroMedico, pero si venimos a datosRegistroMedico, vamos a ver que no podemos mandar nombre en blanco, ni email, ni teléfono en blanco y básicamente ningún parámetro en blanco.

[03:30] Entonces el DTO que vamos a usar no puede ser este mismo. Tenemos que crear otro DTO. Entonces hay dos cosas que podemos hacer ahora. Vamos a public y de igual forma un void y vamos a decirle actualizarMedico, sin parámetros por ahora y este va a tener un método put. Y como ya saben, aquí va putMapping.

[04:03] Y listo, porque estamos mapeando la misma URL. Segundo, ¿qué es lo que necesitamos? Ya vimos que la actualización debería ser más o menos como el registro. Pero en el registro yo recibo los datos de registro médico y para actualizar, yo debo saber qué médico es el que debo actualizar.

[04:23] Si vamos a listar los médicos, por ejemplo, estamos aquí, ahora sí, mi servidor demoró un poco en venir. Vemos que, por ejemplo yo tengo aquí dos Diego López. Uno tiene un documento diferente del otro, podemos decir que son homónimos, tienen el mismo nombre, pero su número de documento, pues es diferente.

[04:49] Ahora hay un correo también. ¿Yo cómo sé cuál de los Diego López, yo quiero actualizar? Lo que se hace normalmente en estos casos es usar el id, si vamos a la base de datos, yo debería aquí mi base de datos, voy a abrir mi tabla médicos, ustedes van a ver que aquí hay un elemento único para cada registro que es el id.

[05:12] A nivel de API, lo que hacemos normalmente es retornar ese id al cliente, de modo que el cliente por ejemplo si tú muestras una lista, vamos a la tabla anterior. Si tú en la lista, por ejemplo, si en la aplicación móvil yo le doy clic a Adriano Moreira, por ejemplo internamente, ya deberías saber cuál es el id de Adriano Moreira.

[05:38] Y enviarme ese id como parámetro para yo decir: “correcto, yo necesito modificar el elemento con este id”, que es un elemento único a nivel de base de datos. Y eso es lo que vamos a hacer en este momento, voy a incluir el id en el payload para listar los médicos. ¿Cómo hago eso? Muy simple.

[06:01] Aquí vamos a ir primero que todo a datosListadoMedico que es nuestro DTO. Voy a cerrar aquí. Y lo que voy a decirle aquí es que voy a recibir un Long id, y aquí yo le voy a decir medico.getId(). Y listo, eso sería lo que yo necesito para mostrar el id en mi listado de médicos. Voy a guardar, voy a esperar que se refresque mi servidor. Vemos que ya refrescó, y vamos a ver si funciona mi método.

[06:40] Le voy a dar otra vez enviar y ahora ya tengo el id aquí. Por lo tanto, yo ya sé que Diego López, que yo voy a modificar aquí es el Diego López con el id 5. Perfecto. Entonces, ¿qué más necesitamos ahora? Los parámetros. ¿Por qué? Porque yo necesito de alguna forma enviarle los datos que yo quiero modificar. ¿Cómo hago eso? Lo vamos a ver en el siguiente video.







														03 Actualizando datos #1
														
Transcripción
[00:00] Bien, vamos a continuar, ya sabemos que nuestro put digamos, ya está cableado como decimos, el request del cliente ya está llegando a mi servidor, entonces ahora vamos a proceder a implementarlo. ¿Cómo?

[00:14] Primero el DTO va a cambiar porque repitiendo lo que vimos en el video anterior, aquí los parámetros son obligatorios, pero por requerimiento yo no debo permitir actualizar email, especialidad y documento. Email, especialidad y documento son obligatorios aquí. Yo no debería enviarlos. Entonces, para no hacer tanto problema, yo voy a poner aquí un datosActualizarMedico.

[00:40] Este va a ser mi nuevo DTO. Vamos a poner el mismo nombre. Y voy a crear otro Java récord. Para crear mi DTO. Venimos aquí, cree el record dentro del paquete médico. Perfecto y le damos okay. Aun no lo agregamos a Git. ¿Y qué es lo que vamos a aceptar aquí? Bueno, ¿qué podemos actualizar? Vamos al requerimiento y solo es nombre, documento y dirección.

[01:10] Venimos aquí y le damos String nombre, String documento y Dirección. Y para dirección, como las reglas de negocio no han cambiado para dirección, porque para la dirección solo sabemos que se puede actualizar, pero obviamente una dirección hay ciertos datos que debe tener como calle, distrito, ciudad número o complemento.

[01:43] Entonces dirección no va a cambiar en reglas del negocio, todos lo vamos a mantener tal cual, con las mismas validaciones. Entonces tenemos dirección, documento, nombre y como ya lo vimos en la clase anterior, para actualizar necesitamos saber el id y le vamos a agregar un Long id.

[01:59] Ahora el único parámetro que debería ser obligatorio debería ser el id, porque sin el id yo simplemente no sé qué elemento es el que yo quiero actualizar. Entonces yo le voy a poner un NotNull. ¿Por qué? Porque es un long. El NotBlank sería para los que son strings, pero como es un long yo le pongo NotNull.

[02:22] Con eso es más seguro que el id nunca va a venir vacío y si es que viene vacío, entonces retornable un bad request porque yo no sé qué datos quieres que actualice. Ahora venimos al MedicoController, vemos que el método ya compila ¿y cuál es el primer paso que debemos hacer aquí?

[02:42] Por ejemplo, ustedes saben que quieren actualizar a Diego López con el id 5. Pero yo lo tengo aquí en el listado. ¿Qué es lo que yo tendría que hacer aquí para obtenerlo de la base de datos? Bien primero, entonces lo que voy a crear aquí es una instancia de médico.

[03:05] Y aquí yo voy a llamar a mi repositorio, MedicoRepository.getReferenceById. ¿Por qué? Porque como en eso yo voy a decirle datosActualizarMedico.Id, porque lo está recibiendo por el cliente, el cliente me está enviando el id, entonces yo digo: “déjame buscar ese médico en mi base de datos para obtenerlo y yo voy a obtener esa entidad médico”.

[03:31] Nuevamente, al igual que el final, el getReferenceById, si vamos al repositorio, no hay nada en mi repositorio. Esto es porque simplemente ese método existe en la interfaz JpaRepository, de la cual nosotros estamos extendiendo. Es una más de las ventajas de Spring, ya podemos tener esta query y no vamos a hacer nada nosotros.

[03:51] ¿Qué más vamos a hacer? Bueno, vamos a decirle medico.actualizarDatos vamos a crear este método dentro de médico y actualizar datos debe recibir datosActualizarMedico. Entonces vamos a crearlo automáticamente, Spring lo puede hacer por nosotros. ¿Y qué es lo que vamos a hacer aquí?

[04:14] Aquí vamos a decirle entonces que el nombre del médico me lo iguale a lo que está llegando del DTO, bien parecido a lo que está aquí. Entonces yo puedo copiar, por ejemplo, entre los datos que yo puedo actualizar están nombre, documento y dirección. Entonces voy a copiar esto.

[04:32] Le voy a decir nombre, copia aquí, lo mismo para documento. Voy por ahora copiando en DTO, nombre, documento, aquí también voy a obtener el documento y para la dirección yo voy a hacer exactamente un método para actualizar los datos de dirección, como simplemente this.direccion = direccion.actualizarDatos.

[05:10] ¿Y como parámetro qué creen que va ahí? Va a ir datosActualizarMedico. dirección. Como este método no existe, de igual forma yo lo voy a crear en dirección y simplemente vamos a copiar esto. Y ustedes pueden pensar entonces ya está, vamos a hacer un return dirección. Ya está. Vamos a retomar el mismo objeto porque es lo que estamos actualizando.

[05:43] Y aquí también, pues ese es un void. Entonces todo bien, no necesitamos nada más. Y al inicio ustedes me pueden decir: “Okay, Diego, suficiente con eso”. Pero aquí viene una consideración muy especial porque recuerden, yo puedo actualizar o uno o todos los parámetros, pero por ejemplo, ¿qué pasa si yo solo quiero modificar el documento?

[06:06] Entonces, en mi payload que yo voy a enviar aquí, por ejemplo, yo puedo decirle, puedo copiar esto y en el request put solamente mandarle un nombre. Si yo hago eso, entonces documento, llega null, dirección también llega null, y de la forma cómo está mapeado ahora lo que él va a hacer es reemplazarlo por null.

[06:31] ¿Entonces, qué puedo hacer? Preguntar si el parámetro está llegando vacío o no, entonces lo voy a decir if, abro los paréntesis. ¿Y aquí la condición cuál va a ser? If datosActualizarMedico.nombre() es diferente de null. ¿Entonces, qué es lo que yo voy a hacer? En ese momento recién voy a actualizar los datos.

[07:00] De igual manera, para cada uno de estos parámetros. Yo ya lo borro de aquí. Y nuevamente voy a preguntarle acá si nuevamente abro y voy a hacer exactamente la misma validación. Si documento es diferente de null y no lleva nulo, es porque yo estoy mandando una información en ese documento, entonces ahí actualízame el documento.

[07:32] No voy a comparar si es que está vacío también porque ya se sobreentiende que yo no voy a poner a propósito este parámetro en el front end vacío. Finalmente, el último if que vamos a hacer aquí. Venimos acá, abrimos y vamos a preguntarle, pues si dirección, datosActualizarMedico.dirección es diferente de null.

[08:00] Y con esto, simplemente yo corto, pego aquí y ya tengo mi método. Con esto ya está mi método para actualizar los datos dependiendo, pues lo que está llegando aquí. Para lo que es actualizar datos de dirección, yo estoy igualando todo porque mis parámetros de dirección vemos que todos están siendo aquí considerados.

[08:25] No voy a ir a mi DTO de dirección, que sería en el datosRegistroMedico, voy a DatosDirección. Y automáticamente él ya me valida que ninguno de estos datos llegue vacío. Entonces, por ese lado yo estoy tranquilo, por ese lado no me voy a preocupar de aplicar la misma validación porque ya a nivel de DTO ya lo estoy haciendo.

[08:50] Entonces yo ya sé que cuando actualice los datos de la dirección va a venir una dirección válida y yo puedo realizar, puedo igualar estos parámetros automáticamente. Entonces sin más que decir, vamos a probar el método.

[09:05] Guardamos aquí y ahora llega la hora de modificar nuestro request, entonces voy a venir aquí a mi new request y voy a crear el payload que yo quiero enviar. Selecciono JSON, perfecto y yo voy a agarrar un método del listado, ya dije que yo quiero actualizar a Diego López con el id 5, entonces voy aquí, de pasada voy a cambiarle el nombre, le voy a poner a Actualizar Medico, solo para que quede más entendible.

[09:36] Renombramos y pegamos el Jason, pero como les dije, yo quiero solamente especialidad no se puede actualizar, entonces se las voy a borrar. Payload. Y solamente quiero digamos actualizarle el nombre, no el documento ni el email. El email no se puede tampoco.

[09:56] Entonces yo le voy a decir, quiero actualizar el nombre de Diego López porque como tengo dos Diego López a él lo vamos a llamar por su segundo nombre, que puede ser Luis por ejemplo. Él se llama Diego Luis López entonces ahora para que se diferencien entre ellos, va a ser Luis.

[10:13] Ahora, yo entro aquí a mi controller, voy a MedicoController ya está el actualizar médico, ya está el datosActualizarMedico como DTO, vamos a ver si mi método funciona, le doy enviar y me salió un 500 internal server error. Y me dice InvalidDataAccessException, el id no puede ser null.

[10:35] ¿Qué quiere decir? Que el id que tiene aquí no ha sido detectado por Spring a pesar de que yo lo estoy enviando aquí como no nulo. ¿Por qué? ¿Por qué es este problema?






														04 Actualizando datos #2
														
Transcripción
[00:00] Es básicamente porque aquí yo en ningún momento lo he dicho a Spring: “Spring, por si acaso, estos parámetros que tú ves aquí son los que están llegando del body al request”. ¿Recuerdan? Exacto, me está faltando RequestBody. Entonces yo voy a copiar nuevamente RequestBody aquí y le voy a decir que me lo valide, porque yo quiero que el id no llegue nulo.

[00:27] Entonces @RequestBody @Valid DatosActualizarMedico. ¿Por qué? Porque ahora Spring con eso ya sabe, voy a agarrar los parámetros que están aquí, porque si no simplemente este parámetro es nulo y id simplemente es nulo. Por eso es que me da ese tipo de excepción de ir a Access Exception.

[00:45] Vamos a esperar que el servidor cargue, me parece que ya recargó. Vamos a enviar otra vez y retornó 200. Vamos a ver si es verdad esto. Me voy a mi listado de médicos, vemos que mi id 5 está con Diego López, lo voy a ejecutar nuevamente y vemos que aún está con Diego López. Aquí sucedió algo. No funcionó el update.

[01:09] Y ustedes me preguntarán: “Diego, ¿por qué no funcionó el update?” Simple. En ningún momento estamos cerrando la transacción para que el médico actualice los datos, por transacción. ¿Se les ocurre o conocen una anotación para esos casos? Exacto, estamos hablando de @Transactional.

[01:31] Con @Transactional, yo voy a guardar aquí y automáticamente JPA Hibernate va a mapear que cuando termine este método la transacción se va a liberar. Ese es un concepto básico entre las acciones a nivel de base de datos, inicia la transacción a este nivel y cuando termine lo que va a hacer es un commit de los datos a nivel ya de base de datos. Por lo tanto, mi transacción va a ejecutarse realmente.

[02:02] Voy a entonces darle un ActualizarMedico otra vez, voy a enviar, me da 200 y cuando listo mis médicos vemos que ahora ya Luis López ya fue actualizado con el id 5. ¿Por qué? Nuevamente Transactional lo que hace es abrir una transacción en la base de datos, JPA lo que hace es mapear mi médico que yo estoy trayendo de la base de datos, ahora ya lo tengo en el contexto de JPA.

[02:29] Y una vez que yo actualizo los datos de este médico, como está dentro de esta transacción, una vez que el método termina, la transacción también termina. Una vez que una transacción termina, hace un commit en la base de datos, y mis cambios son guardados ejecutados correctamente.

[02:48] Otro beneficio de la transacción es que, por ejemplo, si tú tienes múltiples actualizaciones por caso, yo quiero actualizar aquí los datos del médico y acá tengo otro método de actualizarDirección. ¿Qué pasaría si actualizo correctamente los datos del médico y sucede un error al momento de actualizar dirección?

[03:07] Los datos médicos ya estarían guardados y habría inconsistencia de datos. Con @Transactional eso ya está cubierto porque simplemente la transacción no va a hacer un commit en la base de datos. Va a hacer un rollback y no sucedió nada. Eso ya es algo un poco más profundo a nivel de lo que es Spring Boot, Spring JPA en sí y no va a ser parte del enfoque de este curso, pero es bueno que lo sepan.

[03:36] Viene mucho en su vida laboral diaria. @Transactional es una anotación que van a usarla regularmente, por ejemplo aquí, en el PostMapping también podríamos usar @Transactional, pero estamos llamando directamente al repository.save. En este caso aquí no estamos llamando a ningún repositorio para hacer el update de los datos, solo estamos usando JPA puro. Por eso el @Transactional aquí es necesario.

[04:01] Solo queda una sola cosa más por hacer aquí y es el delete, pero eso es un tema del siguiente video.





														Elegir entre el método HTTP PUT o PATCH es una pregunta común que surge cuando estamos desarrollando APIs y necesitamos crear un endpoint para la actualización de recursos. Comprendamos las diferencias entre las dos opciones y cuándo usar cada una.

PUT
El método PUT reemplaza todos los datos actuales de un recurso con los datos enviados en la solicitud, es decir, estamos hablando de una actualización completa. Entonces, con él, hacemos la actualización completa de un recurso en una sola solicitud.

PATCH
El método PATCH, a su vez, aplica modificaciones parciales a un recurso. Por lo tanto, es posible modificar solo una parte de un recurso. Con PATCH, entonces, realizamos actualizaciones parciales, lo que flexibiliza las opciones de actualización.

¿Cuál elegir?
En la práctica, es difícil saber qué método usar, porque no siempre sabremos si un recurso se actualizará parcial o completamente en una solicitud, a menos que lo verifiquemos, algo que no se recomienda.

Entonces, lo más común en las aplicaciones es usar el método PUT para las solicitudes de actualización de recursos en una API, que es nuestra elección en el proyecto utilizado a lo largo de este curso.






																			07 Request DELETE
																			
Transcripción
[00:00] Bien, ya tenemos el último requerimiento para terminar nuestro CRUD: el delete, y eso ya es la exclusión de médicos o deletes de médicos, como quieran llamarlo.

[00:12] Ahora, en las reglas negocio aquí hay algo muy curioso y es que dice: El registro no debe ser borrado de la base de datos. Y el listado debe retornar solo médicos activos. Esto ya me está diciendo que el delete que yo debo hacer es un delete lógico.

[00:29] Es una exclusión lógica y no una exclusión, por así decirlo física, o sea, lo que yo quiero es que el médico quede desactivado a nivel de base de datos, pero yo no quiero que esa línea se elimine de mi base de datos porque obviamente siempre es bueno mantener un histórico, qué médicos han trabajado aquí.

[00:50] Por ejemplo venimos aquí y supongamos pues que Diego López, mi médico, que está aquí, él ya renunció al trabajo, entonces yo tengo la opción de borrar este registro de la base de datos, con lo cual yo ya no tengo ninguna prueba histórica de que Diego López alguna vez hizo parte de voll.medClinic o puedo simplemente desactivar su registro, que es un delete lógico, exclusión lógica.

[01:16] Vamos por partes. Lo primero, como siempre, voy a crear mi request. Voy a decirle aquí que este request se va a llamar delete médico. Voy a renombrar y le digo Delete médico. Hago un renombre y voy a copiar la misma URL porque ya vimos que es igual. Pero el verbo HTTP va a ser un delete como hemos visto aquí.

[01:46] Entonces ya tengo mi método que va a borrar médico, si lo ejecuto nuevamente método no permitido porque no está implementado. Ahora, el delete tiene algo muy curioso, y es que al igual que yo necesito saber el id por ejemplo, al igual yo tengo que venir acá y traer al médico por el id, el médico que yo quiero actualizar, delete también necesita saber que médico es el que va a eliminar.

[02:16] Vamos a dividir esto en dos partes, primero vamos a hacer el delete común, el delete verdadero. Vamos a borrar un médico de la base de datos y después ya lo damos a modificar para que haga la exclusión lógica. ¿Cómo le decimos ahora al método delete “bórrame el médico con el id 3”, por ejemplo? En el listado tenemos el id 3.

[02:39] ¿Cómo le digo, “quiero que el médico con id 3 sea eliminado?” Bueno, se lo puedo enviar en el body, puedo incluir aquí un parámetro, puedo crear un DTO con un solo parámetro, que diga id y mandárselo, algo como eso de repente. Puedo crear aquí un JSON con id, igual y el id que yo quiero enviar. Pero no es la idea, no es la idea.

[03:05] Aquí yo tengo una forma un poco más interesante de hacerlo y es usando path variables. ¿Qué es un path variable? Path variable es una variable que va en la URL, en el path, este de aquí es el path. Entonces un path variable es una variable que va aquí, por ejemplo el id que yo quería eliminar era el id 3.

[03:28] Entonces sería localhost:8080/médicos/3. Si yo le doy igual a enviar, me va a decir not found. ¿Por qué? Porque esta URL de aquí no existe. Cuando la UR no existe, ¿qué es lo que hacemos? Crearla. Entonces, igual que antes vengo aquí y le voy a decir public void eliminarMedico. Abro paréntesis, y si ya tengo, por ejemplo, putMapping, postMapping, getMapping. ¿Qué creen que puede ir aquí? DeleteMapping.

[04:02] Entonces vamos a @DeleteMapping, perfecto, eliminarMedico. Y vamos a dejarlo ahí por ahora porque ya se supone que mi delete ya está mapeado. Ahora voy a guardar. Vamos a limpiar nuestra terminal. Esperamos que recargue mi servidor. Vemos que recargó. Envío y vemos que igual no encuentra la URL, porque el slash 3 no está mapeado.

[04:38] Nosotros tenemos el @RequestMapping hasta médicos,¿qué podemos hacer aquí? Simple, voy a decirle que en el @DeleteMapping, abre los paréntesis y aquí le voy a decir, aquí no, tiene que ser dentro de los paréntesis, y le voy a decir (“/3”). Con eso voy a mapear mi URL correctamente. Espero que cargue mi servidor nuevamente.

[05:01] Vemos que recargó. Voy a darle enviar y me va a dar okay, encontró esta URL, mi URL ya existe, ¿pero qué pasaría si yo no quiero eliminar el id 3? Yo quiero eliminar el id 5, 10, 1. Esto no puede ser fijo, esto tiene que ser dinámico. ¿Y cómo me aseguro que sea dinámico? Bueno. Abrimos llaves y le vamos a dar un nombre a esta variable, a este path variable que va a ser id.

[05:33] Con esto Spring ya va identificar que aquí va a ir una variable. A este nivel, no sabe qué va a ir, pero va a ir a alguna variable. Va a ir un id aquí. Si guardo aquí, por ejemplo vamos a esperar a que cargue mi servidor nuevamente. Recargó, voy a enviar y me da 200 a pesar de que ya no lo he mapeado con /3. ¿Por qué? Porque ya esta variable es dinámica. Primer paso ejecutado.

[06:04] Segundo paso, obtener esta variable para trabajar con ella. ¿Qué es lo que tengo que hacer? Bueno, simplemente tengo que declarar mi variable, entonces le voy a decir aquí (Long id). Pero si recuerdan, Spring mágicamente no detecta de dónde viene esta variable.

[06:22] Puede venir del body, puede venir de un query param o puede venir de aquí de un path param. Como le vamos a indicar a Spring, por si acaso, esto viene de un path param. de un parámetro en el path, vamos a decirle que es un path variable. Entonces con esto Spring lo que va a hacer es “viene del path variable id”.

[06:44] Entonces automáticamente el valor que yo le asigne aquí lo va a asignar a mi variable local, aquí en mi servidor, con el tipo de dato long. Segundo, al igual que hicimos aquí, vamos a obtener nuestro médico que queremos eliminar. Este de aquí. Pero en lugar de mandarle el DTO, vamos directamente decirle: “agarra el id que te hemos enviado”.

[07:14] Entonces borramos esto. A ver que ocurre un desastre y aquí solamente id. Listo. Entonces ahora el médico va a ser medicoRepository.getReferenceById, y con esto él ya va a eliminar el médico. Ahora vamos a medicoRepository.delete y le vamos a mandar el médico como entidad que queremos borrar.

[07:37] Y como aprendimos aquí, si queremos hacer una transacción en la base de datos, si queremos que nuestros cambios sean commiteados, vamos a agregarle pues un @Transactional aquí también para que tenga tengan efecto estos cambios a nivel de base de datos.

[07:56] Vemos que ya recargó y vamos a probar nuestro método, vamos a listar nuestros médicos primero. Vemos que el id 3 existe, voy a hacerle un delete y voy a borrar el médico con el id 3, vamos a ver qué me dice. 200 OK. Voy a mi listado, lo envío y ya no tengo más ese médico con el id 3, ese médico ya se eliminó por completo de mi base de datos.

[08:24] Pero por reglas del negocio, el registro no debe ser borrado de la base de datos. Hasta ahora ya sabemos cómo funciona el delete a nivel de base de datos. Ya hemos eliminado el médico de la base de datos. Pero no es lo que queremos por ahora, en el siguiente video vamos a actualizar este método para hacer un delete lógico, nos vemos.






																			08 Exclusión logica #1
																			
Transcripción
[00:00] Bien, vamos a implementar nuestro caso de uso del negocio, que sería el delete lógico. Vamos a ver aquí lo que nos retornan y por ejemplo, ya vimos que tengo el id, pero yo no quiero borrarlo de la base de datos, entonces lo que yo necesito hacer es un filtrado, un filtrado de mis datos para traer los que estén activos.

[00:24] Este caso de uso es muy común que lo llamamos, que le vamos a agregar un flag, una bandera, algún alguna característica a estos médicos que me digan que están activos. ¿Esto qué es? Agregar un campo más a mi identidad médico, que sería ese de aquí. Y por lo tanto, también a mi base de datos, un campo que me diga: “Diego, este médico está activo, este médico no está activo”.

[00:51] Eso le suena a un migration. Entonces, como ya sabemos, detenemos el servidor porque vamos a trabajar con migrations, vamos a hacer un nuevo migration, limpiamos esto y primero que todo voy a crear mi campo aquí y lo voy a llamar por ejemplo un private Boolean, para que sea solo true or false y se va a llamar activo.

[01:13] Tengo mi activo aquí. Y a nivel de constructor, también voy a modificar el constructor. Le voy a decir this.activo = true, porque yo llamo al constructor cada que estoy creando este objeto, todo médico que se esté creando por defecto está activo. Entonces ya tengo aquí, en actualizarDatos no voy a modificar nada. A nivel de Java ya está todo, no necesito hacer nada más. ¿Qué es lo que sigue ahora?

[01:42] El código SQL. Entonces aquí yo ya tengo un alter table para crear un nuevo campo a mi tabla médicos, voy a copiar lo mismo, pero no voy a copiar esto aquí y le voy a pegar aquí, ya vimos que eso no funciona. Lo que yo voy a hacer es copiar todo esto, el archivo me refiero y lo voy a actualizar aquí a V3__alter-table-medicos-add-activo. Le damos OK, no lo agregamos a Git aún. Y ya está.

[02:18] Aquí lo que yo le voy a decir es alter table médicos add activo y no va a ser un varchar, esto va a ser un tinyint y del tipo no va a ser no nulo, porque si no los parámetros que están anteriormente creados no van a funcionar. Y eso sería todo por ahora. Por ahora tengo mi tinyint, mi tabla médicos y le voy agregando el activo.

[02:51] Ahora si yo quiero filtrarlo por este parámetro yo necesito que los demás parámetros estén actualizados, que los demás registros en la base de datos estén actualizados. Para esto yo lo que yo le voy a decir es update médicos set activo = 1. Porque en lo que él va a hacer es actualizar todos los registros anteriores que ya existen en mi base de datos.

[03:23] Me refiero todos estos que no tienen la columna activo. Como yo ya la estoy agregando, y no quiero que esté vacía, no quiero que esté nula, entonces yo aquí mismo ya voy a actualizar los registros anteriores para que todo esté sincronizado hasta este momento.

[03:40] Voy a ejecutar mi migration, ya tengo mi alter table, tengo mi update, voy a iniciar mi servidor, y vamos a ver qué es lo que me dice Spring. Vemos que está iniciando. Vemos que validó 3 migrations. Vemos que aplicó satisfactoriamente una migración, entonces parece que el migration funcionó correctamente.

[04:06] ¿Y qué más vamos a hacer? Vamos a validar. Abrimos aquí. Listamos nuestra tabla. Y vemos que ahora activo ya se agregó, recuerda que no había antes. Ahora está activo y todo está 1 por defecto, entonces todos mis médicos ahora ya están activos. Primer paso completo, check. Cerremos esto, ya no lo necesitamos, cerramos el migration.

[04:28] Ya fue ejecutado, ya no lo necesitamos tampoco. Y dado que lo que queremos hacer es un delete lógico, vamos aquí a Controller, dado que lo que queremos es un delete lógico, entonces no queremos llamar al método delete, queremos llamar al método update. ¿Por qué? Vamos a ver aquí.

[04:50] Yo voy a dejar comentado este método solamente para que lo tengan de referencia luego. Y voy a actualizar aquí, primero que todo eso, he obtenido el médico y aquí yo le voy a decir que haga un update, aquí por ejemplo medico.desactivarMedico. Entonces, esto como parámetro va a recibir el médico.

[05:29] Listo. Aquí voy a venir, le voy a crear el método y en desactivar médico lo que yo le voy a decir es medico.activo = false. Y eso sería todo lo que yo tengo que hacer. Regreso aquí. Y ya no debo hacer nada. ¿Por qué? Porque ya está anotado con @Transactional.

[05:55] Entonces cuando termine este método, este médico que ya fue actualizado y el parámetro que hemos actualizado es el nuevo que hemos creado, activo = false, entonces, estos datos van a ser commiteados en la base de datos. Aquí yo le voy a decir que este es el delete en base de datos y a este de aquí le vamos a llamar un delete lógico.

[06:23] Entonces vamos a guardar y vamos a ver si es que funciona mi método. Esperamos aquí. Vamos a borrar el médico con el id 5, por ejemplo, ya no existe un 3. Ahora le damos a borrar 5 enviamos, me da 200 OK. Voy a listar mis médicos. Y cuando yo le diga listado, vemos que sigue apareciendo. Aquí sucedió algo, voy a revisar mi base de datos.

[06:53] Voy a venir aquí, y el primer médico vemos que sigue con activo igual 1. ¿Esto por qué es?






																			09 Exclusión logica #2
																			
Transcripción
[00:00] Porque cuando yo estoy haciendo aquí el medico.activo = false; estoy dejando de trabajar a nivel de la entidad de JPA. Entonces lo que yo aquí debo hacer es decirle que this.activo = false; y no voy a usar ningún parámetro aquí. ¿Por qué?

[00:19] Vamos a ver cómo es la relación que tiene JPA con esto. Voy a guardar, vemos que tengo mi desactivarMedico, va a dar un error de compilación, porque aquí está con el parámetro. Este médico de aquí ya no tiene por qué existir, porque yo ya lo tengo aquí a nivel del repositorio, como yo ya lo cargué a nivel de mi repositorio, yo ya estoy trabajando con la entidad directamente aquí.

[00:42] Yo voy a desactivar este médico que tengo acá. Entonces ahora le voy a dar a guardar. JPA en su contexto Hibernate, bueno que es la implementación, en su contexto él ya lo va a actualizar y como está con @Transactional, ahora sí, una vez que sea actualizado él ya lo va a commitear en su base de datos.

[01:03] Nuevamente delete médico, enviar, 200, actualizar médico, perdón, vamos al listado, vemos que sigue apareciendo, pero en la tabla médicos ya activo, ya está con 0. Ya está marcado con 0. ¿Esto por qué? El médico ya fue desactivado, pero ahora yo obviamente no quiero mostrar solamente mis médicos activos e inactivos. El listado debe retornar solo médicos activos según mi requerimiento inicial del negocio.

[01:36] ¿Cómo modifico esto? Bueno. Vamos aquí a mi método de listarMedico y aquí va a ocurrir algo muy curioso, yo voy a duplicar esta línea y se las voy a dejar comentada aquí para que quede como referencia. Pero voy a cerrar esto. Yo voy a decirle aquí findByActivoTrue. ¿Qué significa eso?

[02:04] Le estoy diciendo medicoRepository, encuentra por parámetro activo true. Esta nomenclatura de aquí es la que usa Spring Data, Spring JPA para crear dinámicamente las queries y hacer el where en el select, select from where activo = true.

[02:25] Esa nomenclatura es propia de Spring y nos facilita la vida. ¿Ahora por qué está dando rojo? Porque obviamente no existe en nuestra interfaz que estamos extendiendo. Esto es muy customizado digamos, yo estoy customizando de un atributo de mi propia tabla que yo lo acabo de crear.

[02:43] ¿Qué hago? Voy a crear el método. Pero yo le voy a cambiar el tipo de dato a una página de médico. Y con esto estoy diciendo: retórname una página de médicos que es esta de aquí. Regreso a lo anterior y vemos que ya está compilando. Voy a guardar. Vamos a esperar a que cargue nuestro servidor. Vemos que terminó de cargar.

[03:18] Vamos a borrar nuestra terminal y vamos a ejecutar nuevamente nuestro listado. Y como vemos el id 5 ya no se muestra más porque está desactivado. El id 5 ya no está, pero si vamos a ver a la base de datos, listamos los médicos. Vemos que en la base de datos todavía permanece. ¿Entonces, qué ocurrió aquí?

[03:39] Un delete lógico. Y vamos a ver la query. Vamos a ver qué ejecutó por ejemplo, Hibernate. Hizo un select from where, where activo y con el limit por la paginación. Entonces de esta forma ya vimos cómo Hibernate y la implementación de Spring data nos permiten incluso hacer queries personalizadas, hacer un findByActivoTrue es una query personalizada.

[04:09] Dependiendo de esa nomenclatura Spring Data va a mapear esto y va a transformarlo a una query SQL normal como la conocemos, la cual está impresa aquí abajo. Esta fue al final la query que ejecutó Hibernate. Como siempre les digo, practiquen mucho, pueden incluso para jugar, para divertirse un poco, pueden intentar hacer findByNombre y ponerle digamos otro tributo aquí, un parámetro.

[04:41] Spring es muy flexible y se presta para casi todos los casos de uso. Sin más que decirles, practiquen mucho, nos vemos en el siguiente video.																			






En esta clase, aprendiste a:
Mapear solicitudes PUT con la anotación @PutMapping;
Escribir un código para actualizar la información de un registro en la base de datos;
Mapear solicitudes DELETE con la anotación @DeleteMapping;
Mapear parámetros dinámicos en la URL con la anotación @PathVariable;
Implementar el concepto de exclusión lógica utilizando un atributo booleano.






													14 Conclusión
													
													
Transcripción
[00:00] Y bien, ya hemos llegado al final de este curso. Si ya estás viendo este video, pues felicidades, ya estás actualizado con lo último que tiene Spring Boot para lo que es API Rest. Es lo último, pero no lo más avanzado. Este curso solamente es digamos la base para unos tópicos mucho más avanzados que hay en Spring Boot.

[00:24] Vamos a hacer un recuento sobre lo que hemos aprendido. Hemos visto hasta ahora primero que todo a generar nuestro proyecto con Spring Initializr. Esta herramienta propia de Spring nos permite crear dinámicamente un proyecto, empaquetarlo como jar, war, usar el gestor de dependencias de queramos y agregar las dependencias como si fuera una receta de un pastel. Muy pero muy fácil.

[00:47] Podemos generar el proyecto o darle una vista previa de cómo es lo que va a generar. Y una vez que lo tenemos aquí, lo descomprimimos y nos va a dar una estructura de proyecto, similar a esta, estructura de proyecto Maven que ustedes ya lo conocen. Tenemos el pon donde están todas nuestras dependencias listadas, todos los datos respecto a nuestro groupId, artifactId propio de nuestra aplicación.

[01:14] Y finalmente también los típicos paquetes de Java, nuestro paquete main, nuestro paquete de test que en este curso no fueron cubiertas pruebas unitarias, pero este proyecto nos va a servir para implementar pruebas unitarias, pruebas de integración en la aplicación de Spring Boot que es algo muy demandado también y otros tópicos más avanzados.

[01:35] Por ejemplo, ya tenemos nuestro Controller, tenemos nuestro MedicoController, con nuestro CRUD, nuestro create, read, update y delete. Tenemos el create, que es para realizar los médicos usando JPA y Hibernate como implementación, pero existen otras formas de retornar estos datos, ya digamos con conocimientos más avanzados en lo que es HTTP. ¿Y a qué me refiero con eso?

[02:03] Un rest services. Y hablando de rest services, estamos aquí ahora con Insomnia. También aprendimos que tenemos una herramienta llamada Insomnia, con la cual podemos crear nuestro request y simular un cliente, un front end o un aplicativo mobile, el que sea, pero probar nuestro API directamente creando diversos requests.

[02:24] Podemos agregarle payloads directamente. Podemos agregarle parámetros para lo que la actualización. Ya vimos lo que son query params, ya vimos lo que son path params, que es esto de aquí, que es parte de la URL. Entonces ya hemos visto una parte inicial de este mundo lo que Rest services Spring Boot y cómo podemos juntarlos en un solo proyecto, este proyecto que como les dije, va a cubrir bastante los requerimientos que tengan en sus primeros trabajos.

[03:00] Pueden usarlo siempre como referencia. Tienen el repositorio en GitHub. Tienen también el foro, en el que pueden comunicar cualquier pregunta o consulta que tengan, me pueden contratar directamente a mí, siéntanse libres. Y bueno, sin más que decirles, nos vemos en el siguiente curso porque se vienen tópicos mucho más avanzados sobre este mismo proyecto. Entonces practiquen mucho, estudien y nos vemos. Felicidades.													