



												02 Build con Maven
												
												
Transcripción
[00:00] Hola. En la parte anterior nosotros realizamos las pruebas y con esto finalizamos el desarrollo de nuestra aplicación. Ahora, una vez que nosotros desarrollamos la aplicación en su totalidad, realizamos todas las pruebas, todas las verificaciones y la ejecutamos, nosotros vamos a querer realizar un deploy o en algún servidor o en alguna nube.

[00:20] Entonces, para eso, nosotros tenemos que entregar un archivo ejecutable, y eso lo vamos a hacer a través Maven. Entonces Maven, además de ayudarnos con la descarga de las dependencias para nuestra aplicación, él nos ayuda a realizar el empacotamiento de todo lo que hemos desarrollado a lo largo del curso para hacer el deploy posteriormente dentro de un servidor.

[00:44] Entonces nosotros tenemos que tener un archivo con las clases compiladas, que es el que vamos a colocar dentro del servidor, y de esa forma va a ejecutar la aplicación para que esté disponible para otros usuarios. Entonces, para eso nosotros acá teníamos en nuestras configuraciones de la API, nosotros estábamos trabajando con una base de datos local.

[01:14] Generalmente nosotros vamos a estar trabajando con bases de datos que se pueden encontrar en otros servidores o en alguna ruta que no necesariamente es la de esta máquina. Adicionalmente, va a tener otra contraseña u otro usuario, y esas contraseñas no pueden encontrarse visibles de esta forma.

[01:37] Entonces nosotros tenemos que buscar una forma de realizar la seguridad para evitar que quede expuesta la contraseña y el usuario, así como la ruta de la base de datos a una persona que pueda tener intenciones maliciosas.

[01:55] Entonces, en resumen, nosotros vamos a realizar el empaquetamiento de nuestra aplicación, vamos a trabajar con los perfiles, en los ambientes donde vamos a trabajar, nosotros ya mostramos que estábamos trabajando con el ambiente de prueba únicamente para las pruebas donde teníamos una base de datos aparte de la base de datos que estábamos utilizando para el desarrollo de la aplicación.

[02:20] Entonces nosotros vamos a tener un tercer perfil que es el perfil de producción. Ese perfil es el perfil donde nosotros vamos a colocar las configuraciones que van a ir al servidor final. Entonces, para eso nosotros vamos a copiar este archivo que es el archivo de aplicaciones. Lo vamos a pegar dentro de la carpeta de recursos.

[02:40] A este archivo le vamos a colocar raya o trazo, prod, indicando que va a hacer el perfil de producción. Ahora, ya que nosotros estamos colocando el perfil de producción, tenemos que, vamos a eliminar esto acá y acá vamos a colocar que esas consultas de SQL no van a ser realizadas.

[03:11] Entonces no le tenemos que colocar como falso las consultas y el formato que deseamos. Ahora tenemos que usar variables de ambiente para evitar exponer la ruta, así como el usuario y la contraseña, dentro de nuestra aplicación. Para eso vamos a utilizar el siguiente comando. Entonces ${DATASOURCE_URL} De la misma forma lo vamos a hacer para el usuario.

[03:46] Acá vamos a colocar DATASOURCE_USERNAME. Ya acá vamos a colocar $DATASOURE_PASSWORD. Entonces, de esta forma estamos indicando a Spring framework, que este va a ser el formato con el que vamos a pasar la URL, entonces así protegemos la aplicación de dejar las contraseñas de usuarios y la ruta de la base de datos expuestos.

[04:14] Adicionalmente, yo tengo que colocar acá el perfil, el perfil que se encuentra activo. Entonces, ya que este es el perfil de producción, vamos a colocar profile.active: prod. Entonces, ya con eso, nosotros estamos indicando acá que estamos activando el perfil de producción para esta configuración.

[04:49] Y dentro de la aplicación convencional, vamos a activar los perfiles profiles.active. Acá vamos a activar todos los perfiles, que sería el perfil de desarrollo, el perfil de test y el perfil de producción.

[05:07] Entonces, ya que yo tengo toda la configuración realizada, vamos a verificar eso, la aplicación, la llave de acceso de token la puedo dejar acá y los errores, los registros de errores tampoco los va a pasar, entonces voy a dejar esta configuración acá.

[05:33] Las URL y el usuario se encuentran ya protegidos con las variables de ambiente y los perfiles se encuentran configurados para el diferente uso. Entonces vamos a ir a la pestaña de Maven y en la parte de API vamos a ir a donde dice ciclo de vida y en package vamos a correr, Maven build.

[05:55] Acá nosotros tuvimos un error. Cuando nosotros colocamos profiles, no es profiles sino profile, sin la S. Vamos a intentar ejecutar la aplicación nuevamente. Esta vez sí se ejecutó correctamente, vemos que el realizó el compilado de forma exitosa, ejecutó las cuatro pruebas y realizó en el lado izquierdo, en el panel izquierdo.

[06:25] Nosotros vamos a encontrar ahora una carpeta llamada target con todas las clases que fueron generadas y un archivo ejecutable que es el que nosotros vamos a tomar y vamos a descargar dentro de alguno de los servicios Cloud, como Amazon, Azure o Google Cloud.

[06:41] Este archivo nos indica la versión, que es 001 API y el formato que es la extensión Java. Entonces, de esa forma, nosotros podemos tomar ese archivo y realizar el deploy en algún servicio. En la siguiente parte vamos a ver cómo se realizan estas actividades dentro de la consola.







												03 Ejecutando via terminal
												
Transcripción
[00:00] Luego de haber compilado la aplicación, ahora vamos a intentar simular el deploy en un servicio de nube o en un servidor local. Entonces lo primero que tenemos que hacer es revisar dónde se encuentra ese archivo dentro de la consola. Para eso vamos a utilizar el comando ls target.

[00:20] Vemos que el archivo se encuentra ahí en la versión 001, vamos a verificar que la versión con la que estamos trabajando que es java -version sea compatible con la que fue compilada la aplicación dentro de IntelliJ.

[00:37] Si nosotros verificamos en la estructura del proyecto vemos que tenemos ya compilada en la versión 17. Nosotros podemos modificar la versión de Java a una versión anterior o una versión superior dentro de las opciones que él ofrece. Entonces, continuando, ahora vamos a intentar compilar ese archivo con el comando java –jar, pasando el nombre y la ruta donde se encuentra.

[01:01] Entonces java –jar target/api- 0.0.1-SNAPSHOT.jar. Ejecutamos la aplicación. Él está compilando. Él realizó todo el proceso, vemos que luego de que compila y ejecuta la aplicación, acá en la parte superior, él vio que no teníamos un perfil configurado cuando nosotros intentamos ejecutar la aplicación, entonces él va a ejecutar por default el perfil de desarrollador o el perfil inicial que no tenía la extensión test o producción.

[01:52] Entonces él tiene un perfil default que es el perfil sin extensión. Ahora nosotros vamos a aplicar acá "Ctrl + C" y vamos a intentar ejecutar el perfil de producción, para eso vamos a pasar la flag --spring.profiles. Esta vez sí es con la S. Indicamos que vamos a activar el perfil de producción.

[02:20] Él intentó compilar, está cargándolo todos los valores y nos genera un error. Entonces si nosotros recordamos, acá nos está indicando qué nosotros no hemos pasado, cuál es la ruta de la base de datos, ni la ruta ni el usuario ni el contraseña, recordando que en el perfil de producción nosotros colocamos variables de ambiente para proteger esas claves de acceso.

[02:47] Entonces lo que vamos a hacer es acá luego de la palabra java, vamos a colocar todos los valores para esas variables de ambiente. En los servicios de cloud, ustedes van a encontrarse en alguna parte como Google o en Amazon, encontrarse en alguna parte donde ustedes pueden configurar esas variables de ambiente o si se encuentra en un escritorio como Windows pueden configurar sus variables de ambiente en la parte de propiedades del sistema.

[03:21] Entonces acá en donde dice variables ambiente pueden configurar las variables que tienen para ese programa, entonces acá vamos a colocar –DDATASOURCE_URL. Vamos a pasar la URL, que sería jdbc:mysql://localhost/vollmed_api.

[03:56] La siguiente es pasar el usuario. Sería desde -DDATASOURCE:USERNAME=root y por último, la contraseña. –DDATASOURCE_PASSWORD=2812.

[04:27] Vamos a verificar, acá vamos a hacer un enter. Y esta vez está compilando. Él buscó el perfil de producción, por los momentos no ha encontrado ningún error. Entonces, las variables de ambiente fueron configuradas, él ejecutó la aplicación y ya no encontramos la aplicación corriendo dentro de nuestro ambiente del escritorio con las variables previamente pasadas dentro de la consola.

[04:54] Entonces el mismo proceso es un sistema de cloud sin servidor y ya de esa forma, nosotros tenemos nuestra aplicación desarrollada y aplicada dentro del servidor exitosamente. Entonces ya con esto concluimos lo que sería el desarrollo de la aplicación donde nosotros ascendamos consultas con médicos y pacientes, realizamos todas las pruebas y todos los diferentes pasos que tiene que tener una aplicación en la parte del backend.





												 09 Lo que aprendimos
PRÓXIMA ACTIVIDAD

Lo que aprendimos en esta aula:

Realizar el build de una aplicación con Spring Boot;
Utilizar archivos de propiedades específicos para cada perfil, cambiando las propiedades que deben modificarse en cada archivo;
Configurar información confidencial de la aplicación, como datos de acceso a la base de datos, a través de variables de entorno;
Crear el proyecto a través de Maven;
Ejecutar la aplicación a través de la terminal, con el comando java -jar, pasando las variables de entorno como parámetros.






											
											10 Conclusión
											
Transcripción
[00:00] Hola, de esta forma llegamos al final del desarrollo de la aplicación de clínica médica, donde creamos el registro de consultas entre médicos y pacientes. Vimos que se cumplía la receta, de controlador DTO, entidades JPA, repositorio.

[00:18] Y aplicamos un nuevo elemento, que sería las reglas del negocio, que las colocamos en lo que sería el componente de servicio. Entonces, nosotros iniciamos creando un controlador que es el que nos permite comunicarnos con APIs externas como Postman o Insomnia, creamos el método que nos permitía agendar consulta.

[00:40] Y recibíamos un record o un DTO con los datos del médico, del paciente o en en dicho caso la especialidad en caso de que el médico no se encontrasse, e íbamos a retornar una respuesta que era el estado de encontrar con los datos de esa consulta.

[01:02] Creamos una clase de servicio para realizar las validaciones que encontrábamos en la tarjeta de Trello. Entonces, en esa clase de servicio nosotros realizamos todas las validaciones y vimos cómo inyectar las validaciones dentro de esta nueva classe.

[01:17] Creamos cada una de las validaciones y le aplicamos una interfaz que nos va a permitir aplicar las buenas prácticas en el desarrollo de API. Nosotros aplicamos los elementos de solid para realizar un clean code. Creamos cada una de las aplicaciones, implementamos esa interfaz, inyectamos la interfaz dentro de nuestra clase de servicio.

[01:47] Realizamos las verificaciones en caso de que el médico no se encontrase nulo, que el paciente no fuese nulo. Buscamos en la base de datos y retornamos los datos de ese paciente. Dejamos algunos desafíos, como era el desafío de cancelar una consulta y seleccionar una consulta dentro de las existentes en la base de datos.

[02:09] Vimos que para el cancelamiento de las consultas, nosotros podríamos crear nuevas validaciones, que también implementan una interfaz. La interfaz, como habíamos mencionado, lo que permite es dar extensibilidad a nuestro código, permitiendo dejar la clase de servicios sin alteración.

[02:32] Entonces queda cerrada a nuevas alteraciones, pero es extensible a través de las interfaces. Luego de eso, nosotros también creamos las diferentes migraciones, que nos permitían agregar nuevas consultas, así como agregar tablas de valores para la base de datos de prueba.

[02:55] Creamos las pruebas unitárias donde probamos los estados 200 y el estado 400, con Spring Framework, ya que nosotros estamos utilizando JUnit y Mockito, donde estamos simulando los ambientes o en un dado caso estamos registrando un valor, que podríamos registrarlo de esta forma, de forma manual, creando métodos o insertando valores en la base de datos de prueba.

[03:23] Entonces acá nosotros utilizamos JUnit y assert y para probar los estados 400 y 200 utilizamos Mockito. Creamos los diferentes perfiles de application property o los perfiles de producción, perfil de desarrollo y el perfil de test, donde colocamos todas las configuraciones necesarias de nuestra aplicación, vimos cómo activar los diferentes perfiles: el perfil de desarrollador, el perfil de test, el perfil de de producción.

[03:52] Y cómo dejar los datos de ruta, de usuario y contraseña más seguro al crear variables de ambiente que pueden ser colocadas dentro del servidor de Cloud, dentro del servidor externo o dentro de la misma aplicación de Windows el ambiente de las variables de ambiente.

[04:15] Dejamos un desafío de cómo aplicar valores ya dentro de la base de datos de prueba y, por último, realizamos el deploy de esta aplicación luego que la habíamos valorado.

[04:31] Nosotros compilamos, empaquetamos y ejecutamos ese archivo que se había ejecutado, que se encontraba con el nombre de API 001, que es la versión en formato Java. Entonces, de esta forma, nosotros concluimos lo que sería la mayor parte de los elementos que vamos a ver en el día a día de un backend.

[04:51] Vemos que existen una especie de recetas que vamos a ver siempre a la hora de desarrollar un controlador. Tenemos que tener el controlador, DTOs, tenemos que tener entidades, repositorios y servicios que van a cumplir las reglas de negocio.

[05:06] Todo esto con una finalidad de almacenar los valores en la base de datos. Entonces esperamos que les haya gustado este curso, nos vemos en próximas ediciones, digo, en otros cursos de Alura.

[05:19] Es recomendable que vean cada uno de estos componentes de forma detenida con la finalidad de que entiendan a profundidad lo que hay detrás de ella, ya que esto es básicamente el día a día de un desarrollador de backend. Ya con esto, ustedes pueden desarrollar su aplicación frontend, como la que vimos para la aplicación mobile, integrarla y comenzar a realizar sus pruebas de integración. Entonces nos vemos en siguientes ediciones, esperemos que les haya gustado.




											