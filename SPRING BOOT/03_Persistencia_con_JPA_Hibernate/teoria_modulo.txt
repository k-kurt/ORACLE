					
					JPA HIBERNATE


 vamos a ver de qué se trata JPA, qué vino resolver, qué nos facilita en el mundo Java y un poco de su historia.

[00:16] Este curso va a estar dividido en dos partes. Esta primera parte va a ser como una introducción de las herramientas básicas utilizadas en JPA y alguno de los puntos que vamos a tratar son la motivación para utilizar JPA, qué es JPA, qué problemas resuelve y un poco de su historia.

[00:36] Luego vamos a ver el download, las configuraciones de JPA en nuestro proyecto, cómo descargar JPA, cómo configurarlo. Vamos a hablar sobre el archivo persistence.xml,que es el archivo que nos permite realizar la conexión con la base de datos.

[00:51] Vamos a hablar sobre mapeamento de entidades que son entidades, cómo mapearlas, cómo se relacionan con las tablas en la base de datos, luego vamos a hablar sobre relacionamientos, qué son relacionamientos, cómo realizar estas relaciones entre diversas tablas de la base de datos y cómo se refleja esto en el proyecto.

[01:11] Vamos a hablar sobre el ciclo de vida de una entidad, cómo consultar una entidad, cómo guardar una entidad, cómo actualizarla, cómo eliminar la de los registros y cuál es la secuencia correcta de pasos que nosotros tenemos que realizar para realizar cada una de estas actividades.

[01:32] Por último vamos a hablar sobre consultas JPQL, que es un tipo de lenguaje similar a SQL, significa Java Persistency Query Language. Es un lenguaje con el que nosotros vamos a realizar las consultas dentro de nuestro proyecto y es un lenguaje bastante similar al utilizado en las bases de datos.

[01:53] Estos son los puntos principales que vamos a tratar, y en el siguiente video nosotros vamos a comenzar a hablar sobre la motivación de JPA, qué es JPA y que vino a resolver en el mundo Java. Nos vemos en el siguiente video.




					 JDBC y sus problemas

[00:00] Hola. Para comenzar nuestra capacitación en JPA analizaremos la siguiente motivación. Para que se creó JPA y cuáles problemas resuelve. Además, discutiremos sobre Hibernate y otras implementaciones.

[00:12] En este video también cubriremos sobre JDBC, que es la tecnología predeterminada de Java para acceder a bases de datos relacionales. Aquellos que aprendieron a programar en Java, probablemente al desarrollar sistemas necesitarán acceder a bases de datos relacionales y para acceder a estas bases de datos con Java o por ejemplo SQL u Oracle la tecnología estándar utilizada es JDBC.

[00:35] Java nació en 1995 y en 1997 llegó JDBC. Antes de JDBC, si queríamos acceder a una base de datos era necesario aprender tecnologías que son bastante complejas y hacer todo manualmente.

[00:48] Había una conexión con la base de datos de hacer toda la comunicación usando el protocolo específico para esta base datos y esto ocasionaba bastante trabajo y era bastante complicado. JDBC vino a facilitar este proceso. JDBC no es más que una especificación para acceder a las bases de datos relacionales, por lo tanto solo una capa de abstracción para acceder desde el código, independientemente del protocolo.

[01:11] En otras palabras JDBC apareció como una capa para simplificar el acceso y facilitar los intercambios de bases de datos. A partir de esto ya no es necesario conocer el protocolo de MySQL o de Oracle y conocer los detalles técnicos o seguir abriendo el socket y seguir haciendo la comunicación manual con la base de datos. Solo basta utilizar JDBC.

[01:32] Cualquiera que haya estudiado JDBC, aquí en Alura tenemos cursos sobre JDBC, sabe que necesitamos tener un controlador. Este controlador es un archivo jar que tiene las clases para conectar a la base de datos, es decir es una implementación de la base de datos sobre JDBC.

[01:49] Entonces si queremos acceder a MySQL, vamos a descargar el controlador de MySQl. Para cambiar a la base la base de datos a Postgre por ejemplo, vamos a cambiar este controlador que es un archivo jar, al controlador de Postgre. Ambos implementan JDBC, por lo que el impacto en el código es mínimo.

[02:09] Al pasar de una base de datos a otra, tenemos pocos cambios en el código ya que básicamente comimos la configuración, pero la mayor parte del código que se comunica con la base de datos sigue siendo la misma. Esto lo hace mucho más fácil porque no estamos atados a un único proveedor ni una única base de datos.

[02:28] Para mantener el código JDBC disperso en varios puntos de la aplicación se creó un patrón de diseño, que es el DAO, Data Access Object. Con este podemos aislar todo el pedido de JDBC dentro de una sola clase, para no quedarnos con los códigos connection result set dispersos por toda la aplicación que son clases de JDBC, que nos permiten el acceso a la base de datos.

[02:51] Básicamente tenemos una clase en la aplicación, un controlador y un servicio o algo de este tipo. Esta clase contiene la lógica de negocio, y en esta lógica es la que necesitamos para acceder a la base de datos. Es decir, no instanciamos ni llevamos clase Js, sino que vamos a llamar la clase DAO, influenciemos la clase DAO y en esta clase donde se abstrae y encapsula el código JDBC.

[03:15] También es el que hace el puente con la base de datos. Entonces hubo una división de responsabilidades en la aplicación. Mirando desde afuera la clase DAO habría algo como esto.

[01:27] Una clase RegistroDeProductoService y necesitaríamos una clase DAO, método registrar producto. Entonces recibiríamos el objeto producto, tendríamos también las reglas de negocio, una validación, cálculo y luego lo llamaríamos la clase dao.registrar.

[03:45] Mirando desde afuera no es posible saber cómo está funcionando esa clase DAO, si está usando JDBC, si la persistencia está en una base de datos, si está en un archivo, si está en memoria, en un servicio externo, tampoco si es MySQL u Oracle. El código es bastante fácil de usar, llamamos a la clase DAO, luego el método registrar pasamos el producto y eso es todo.

[04:06] No estamos presos con la forma en la que se implementó el método registrar. Así que no tenemos el acceso al API de JDBC, está se encuentra aislada. Por fuera el código se ve bastante limpia pero dentro de la clase DAO tenemos un problema. En las clases DAO continuamos usando JDBC, terminamos teniendo un código bastante complicado porque necesitamos usar la API de JDBC, una API bastante antigua ya que fue creada en 1997, con mucha verbosidad.

[04:37] Y eso generó que la gente desarrollara como cierta aversión a Java creyendo que Java es muy burocrático así como JDBC. Por lo tanto necesario tratar con clases como preparedStatement, connection, resultSet y también utilizar try catch ya que arroja excepciones comprobadas, además de ensamblar las consultas manuales y usar el preparedStatement para evitar problemas de inyección de SQL.

[05:04] Al final todo esto hace que el código sea bastante complicado. Ese tipo de código JDBC, a pesar de que funciona bien, tiene algunos inconvenientes que han hecho que la gente piense en otras alternativas. JDBC tienes dos grandes problemas que han motivado surgimiento de tecnologías como Hibernate y JPA.

[05:24] El primer problema es que el código es demasiado detallado, por ejemplo para guardar un producto en la base datos necesitamos al menos unas 30 líneas de código. En un código tan grande el mantenimiento es bastante difícil y requiere mucho tiempo. A veces es necesario ensamblar una consulta nativa desde la base de datos y el código se vuelve cada vez más complicado y difícil de entender.

[05:47] Esto es un gran problema y no es el más difícil, no es el problema más grande de todos. El segundo problema es el alto acoplamiento con las bases de datos. Cuando trabajamos con JDBC, tenemos una acoplamiento muy grande con la base de datos.

[06:00] Significa que si nosotros por ejemplo, realizamos un cambio en la base de datos como el nombre de la tabla o de alguna columna cualquier otro elemento, vamos a impactar ampliamente dentro de la aplicación. Tendremos que cambiar en las clases DAO y el problema es que por ejemplo cuando cambiamos el nombre en la tabla productos puede ocurrir que además de existir en el producto DAO, hay otras clases del dado que realicen joins con la tabla producto.

[06:30] Es decir, pueden haber diferentes DAO utilizando la tabla producto y como nosotros hicimos una alteración en el nombre, tendríamos que buscar todos los elementos que hacen referencia a esa tabla producto y hacer este cambio de nombre.

[06:43] Esto nos lleva un alto acoplamiento en la base de datos. Cualquier cambio en un lado va a tener un alto impacto en el otro. Estos son los dos grandes problemas que la gente comenzó a notar con JDBC y debido a ello ha perfeccionado ideas sobre cómo reducir el impacto que generan estos problemas. De este proceso surgió JPA.

[07:00] En el siguiente video, discutiremos con más calma cómo se creó JPA y cómo resolvió los problemas de JDBC. Nos vemos en el siguiente video.






						Hibernate y JPA


La implementacion son hibernate, eclipseLink,openjpa y la escificaion es JPA. Apra poder utilizar JPA debemos implementar uno de estas 
implementaciones, no se puede usar JPA puro por que es una capa de abstraccion


Transcripción
[00:00] Hola. Ya hemos discutido un poco sobre JDBC y los principales problemas que los desarrolladores comenzaron identificar a medida que creaban sus aplicaciones. La existencia de estos problemas fue precisamente lo que motivó a las personas a buscar alternativas y tecnologías que fueran más sencillas para realizar la conexión con la base de datos.

[00:16] Entre estas tecnologías había una biblioteca que se hizo muy famosa llamado Hibernate. Hibernate fue lanzada en 2001 y creada por Gavin King. La idea era precisamente intentar simplificar JDBC. Suponiendo que tenemos una aplicación web o de escritorio necesitamos acceder a la base de datos, pero no queremos utilizar JDBC porque el código es muy detallado, complejo y está muy acoplado a la base de datos.

[00:42] Gavin King comenzó a pensar en una forma de simplificar el código y creo esta biblioteca llamada Hibernate, y en 2001 fue lanzada al mercado para realizar la persistencia de bases de datos como alternativa a JDBC y EJB 2. En ese momento existía la versión 2.0 de EJB 2 que era una tecnología muy complicada para trabajar.

[01:03] La idea de EJB era simplificar el acceso remoto, tener una aplicación distribuida cliente-servidor y también simplificar algunos detalles de infraestructura como control transaccional, seguridad y otros.

[01:16] También estaba la parte de persistencia con JB, pero esta utilizaba JDBC, un modelo un poco más complejo que favorecía la removilidad, entonces cualquier llamada que se hacía era una llamada remota. Eso tenía un costo de rendimiento Y de todos modos surgieron varios problemas que también generaron varios patrones para resolver esos problemas en EJB2 en la parte de persistencias.

[01:39] Eso también motivó a Gavin King al crear Hibernate. Más tarde Red Hat contrató a Gavin King para continuar trabajando en Hibernate. Así Hibernate pasó a ser una tecnología que pertenece a JBoss de Red Hat.

[01:53] Gavin King trabajo en JBoss y continuó con hibernate y otros proyectos. Con el paso del tiempo aparecieron nuevas versiones de Hibernate, este se hizo famoso en todo el mundo y todos los que trabajaban con Java querían utilizar Hibernate en sus proyectos para no tener que utilizar el EJB 2 ni JDBC.

[02:12] De todos modos se convirtió en un proyecto súper popular y fue evolucionando y luego aparecieron versiones con nuevas características. Como era una biblioteca de mercado también surgieron competidores, por lo tanto estamos hablando una biblioteca que se hizo famosa, popular y de este modo surgieron bibliotecas que comenzaron a copiarla pero haciéndolo de una manera diferente.

[02:34] Esto generó un viejo problema. Imagina que como desarrolladores estamos utilizando una biblioteca y queremos pasar a usar, otra una biblioteca de mercado más económica o con mejores características. Para ello no se trata solo de cambiar los archivos jar o las dependencias del proyecto, esto tendría un impacto considerable en el código.

[02:53] En todos los lugares donde estábamos utilizando Hibernate, va a ser necesario cambiar las características del código. Para esta nueva biblioteca ya que hay otras clases, otras importaciones y si nuestro proyecto fuese muy grande y complejo lo pensaríamos dos veces antes de cambiar la biblioteca o la librería.

[03:14] A Oracle esto no le pareció una buena idea porque esto significa que trabaja con un único proveedor. Posteriormente se creó una estandarización de la librería para Java, va a partir del modelo de persistencia que pasó conocerse como ORM por sus siglas Object Relational Mapping, con la intención de hacer el mapeo y así el puente entre el mundo de las aplicaciones orientadas a objetos y las bases de datos relacionales.

[03:40] Existen estos dos mundos diferentes y la clase DAO era un poco compleja porque estábamos uniendo el mundo orientado a objetos con el mundo de las bases de datos relacionales. Así Java creó una especificación llamada JPA, API de persistencia de Java, que es la especificación para estandarizar el mapeo relacional de objetos en el mundo Java.

[04:01] Con JPA crea un estándar para que no seamos rehenes de una única biblioteca. Los frameworks y las bibliotecas comenzaron a implementar JPA en el código en lugar de importar las clases e interfaces de Hibernate. Comenzamos a usar JPA que es la especificación, por lo tanto la librería se convirtió una implementación.

[04:22] Y para cambiar de implementación, solo necesitamos cambiarlo en jar y una u otra configuración. Pero el código en sí permanecía intacto y sin cambios, ya que no dependía de una implementación, sino de esta especificación JPA.

[04:35] JPA no se lanzó sino hasta 2006, por lo que de 2001 hasta 2006 necesitamos usar Hibernate o sus competidores sin la especificación JPA, que era la que nos orientaba el modo correcto de usar los códigos.

[04:49] Hibernate evolucionó surgieron nuevas funciones y luego se incorporado a la versión 2.0 de JPA lanzada en 2009. Hibernate en 2010 un año después lanzó la versión 3.5.0 que era compatible con JPA 2.0.

[05:07] Entonces sí quisiéramos usar JPA 2.0, podríamos usar Hibernate como implementación, y si luego quisiéramos cambiar a otras implementaciones sería bastante fácil y nos afectaría todo el proyecto. Esta es la gran ventaja de usar la especificación en lugar de usar directamente la implementación.

[05:25] En el mercado nos quedamos con algo como este diagrama donde tenemos a JPA arriba, que es la especificación y también tenemos varias implementaciones como Hibernate, EclipseLink y OpenJPA, entre otras implementaciones del mercado. Estas son las más populares y las primeras que se usan en el mercado.

[05:46] Para trabajar con JPA, tenemos que elegir una de estas implementaciones, es decir no podemos utilizar JPA puro, porque JPA es una capa o una abstracción únicamente. Necesitamos a alguien que implemente los detalles con lo que las bibliotecas como hibernate o EclipseLink hacen ese trabajo.

[06:06] Como Hibernate fue la primera biblioteca, fue entonces la que inició este movimiento fue lo que terminó convirtiéndose en la biblioteca estándar y la más popular, la implementación de JPA por excelencia, pero nada nos impide utilizar otras implementaciones si todo se orienta con JPA.

[06:26] Todos deben cumplir con lo que se describe en la especificación. Además podemos cambiar de una implementación a otra y todo lo que está en la especificación funcionará correctamente. Solo tendremos problema si estamos utilizando algo que sea específico de la implementación.

[06:41] Hibernate a veces hace eso. Sigue las reglas de JPA pero tiene algunos detalles bien característicos que son específicos para Hibernate. Si los usamos, está bien, pero tendremos este problema, que a la hora de nosotros movernos de una implementación. A otra, vamos a perder esta esta funcionalidad o esta nueva característica.

[07:05] Entonces es recomendable mantenernos dentro del patrón de JPA. Entonces, por ejemplo, si queremos cambiar de Hibernate a EclipseLink, vamos a perder esa funcionalidad. Tenemos que tener cuidado y evaluar si está dependencia, esta funcionalidad realmente vale la pena.

[07:20] Eclipselink es la implementación de referencia de JPA. Cada vez que aparece una nueva versión de JPA, EclipseLink ya la está implementando porque es donde se hacen las pruebas y sale con la nueva versión de JPA.

[07:33] Es la implementación de referencia, sin embargo Hibernate al ser la principal y la más popular del mercado es la que tiene mayor demanda. Por eso en este curso trabajaremos con Hibernate como una implementación de JPA.

[07:48] Vamos a finalizar esta parte de la motivación y nuestro objetivo aquí era solamente discutir un poco y entender qué es JPA, por qué se creó, de que nació, qué es Hibernate, cuál es la diferencia entre hibernate JPA.

[08:04] Y ahora que hemos visto esta característica, esta breve historia, vamos a pasar al siguiente video donde vamos a comenzar con la parte práctica nos vemos en el siguiente video.