-----------------------------------------------------------------------------------------------
						TEORIA POLIMORFISMO
						
Es muy importante para tener un codigo limpio, donde podemos modificar 
un solo metodo de la clase padre y asi en cascada nos cambiara solo el resultado


		metodo padre						
		
 
	public double getBonificacion() {
		//si tipo 1==1 es gerente
		//si tipo==0 es funcionario
		return this.salario*0.1;
		
	}
	
	
	
	metodo hijo
	
	
	//sobreescritura de metodo
	public double getBonificacion(){
		return super.getSalario()+super.getBonificacion();
	}
	
	
	
	//INTRODUCCION A POLIMORFISMO
	
	
public class TestReferencia {

	
	
	public static void main(String[] args) {
		
		//todo gerente es funcionario, hereda de funcionario
		Funcionario funcioario=new gerente();
		funcioario.setNombre("Diego");
		
		gerente gerente=new gerente();
		gerente.setNombre("Jimena");
		
		funcioario.setSalario(2000);
		gerente.setSalario(10000);
		
		
	}
	
	
	
}
	
	
	
	
	NO todo FUNCIONARIO es Gerentepor eso no compila el codigo y no cumple con la gerencia y el polimorfismo 
	
	
	public class TestReferencia {

	
	
	public static void main(String[] args) {
		
		//todo gerente es funcionario, hereda de funcionario
		Funcionario funcioario=new gerente();
		funcioario.setNombre("Diego");
		
		
		//NO FUNCIONA EL POLIMORFISMO
		gerente gerente=new Funcionario();
		gerente.setNombre("Jimena");
		
		funcioario.setSalario(2000);
		gerente.setSalario(10000);
		
		
	}
	
	
	
}
	
	
	/////////////////////////
	
	Cuando por parametro paso una clase o un objecto, eso significa que lo instanciamos
	por lo tanto se registra como que lo llamamos y se dispara el metodo
	
	voy a ir sumando poco a poco en suma la bonificacion cada vez que resgistre un nuevo funcionario/
	gerente
	
	
	
	public double registrarSalario(Funcionario funcionario) {
		
		
		this.suma=funcionario.getBonificacion()+this.suma;
		return suma;
	}
	
	public double resgistrarSalario(gerente gerente) {
		this.suma=gerente.getBonificacion()+this.suma;
		return suma;
		
	}
	
	///////////////////////////////////////
	
	POLIMORFISMO EN LA CLASE CONTROLBONIFICACION
	
	
	SI tuvieramos que crear siempre un nuevo tipo de Funcionario, tendriamos que crear muchos metodos
	de RegistrarSalario por cada uno, ENTONCES la solucion es crear un solo metodo aceptando como parametro
	un Funcionario que heredara a sus clases hijos el metodo RegistrarSalario 
	
	
	----------de esto
	
	
	
public class ControlBonificacion{
	
	
	
	private double suma;
	 
	
	public double registrarSalario(Funcionario funcionario) {
		
		
		this.suma=funcionario.getBonificacion()+this.suma;
		System.out.println("calculo actual: "+this.suma);
		return this.suma;
	}
	
	public double resgistrarSalario(gerente gerente) {
		this.suma=gerente.getBonificacion()+this.suma;
		System.out.println(this.suma);
		return this.suma;
		
	}
	
	
	
}



---------------a esto



public class ControlBonificacion{
	
	
	
	private double suma;
	 
	
	public double registrarSalario(Funcionario funcionario) {
		
		
		this.suma=funcionario.getBonificacion()+this.suma;
		System.out.println("calculo actual: "+this.suma);
		return this.suma;
	}

	
	
	
}
	
	///////////////////////////////////
		
	Polimorfismo en metodos
	
	Una clase puede tener su propia regla de negocio basada en la de su clase padre, sobreescribiendo
	el metodo
	
	
	
	@Override
	public boolean saca(double valor){
		
		double comision=0.2;
		return super.saca(valor+comision);
		
	}	
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
		
	///////////////////////////////////
	
	
	Sobreescritura de constructores 
	
	
	Para tomar los parametros de una clase padre tenemos que usar la palabra clave 
	Super en la clase hija, creando un constructor con los parametros de la clase padre
	y pasando con el super ese parametro a la calse padre, el super esta adentro del constructor
	
	
	
	La clase PAdre:
	
	
public class Cuenta {
			
	

		double saldo;
		int agencia;
		int numero;
		Cliente titular;
		
		
		


		public Cuenta(int agencia) {
			super();
		
			if(agencia<=0) {
				System.out.println("No se permite 0");

				this.agencia = 1;
			
			}else {
				this.agencia=agencia;
			}
			total++;
			
			System.out.println("Se van creando: "+ total+ " de cuentas.");
		}
		
		
		
		
		clase hijas:
		
		
		
public class CuentaCorriente extends Cuenta {

	
	public CuentaCorriente(int agencia) {
		super(agencia);
	}
	
	
	
}
		
		
		
		
public class CuentaAhorro extends Cuenta {
  public CuentaAhorro(int agencia) {
		super(agencia);
		// TODO Auto-generated constructor stub
	}
}
		
	
	
	
	
	
	
	
	///////////////////////////////////
	
	Modificadores de acceso

Los modificadores de acceso o accesibilidad son algunas palabras claves utilizadas en el lenguaje Java para definir el nivel de accesibilidad que los elementos de una clase (atributos y métodos) e incluso la propia clase puede tener los mismos elementos de otra clase.

Public

Este es el modificador menos restrictivo de todos. De esta manera, cualquier componente puede acceder a los miembros de la clase, las clases y las interfaces.

Protected

Al usar este modificador de acceso, los miembros de la clase y las clases son accesibles para otros elementos siempre que estén dentro del mismo package o, si pertenecen a otros packages, siempre que tengan una relación extendida (herencia), es decir, las clases secundarias pueden acceder a los miembros de su clase principal (o clase de abuelos, etc.).

Private

Este es el modificador de acceso más restrictivo de todos. Solo se puede acceder a los miembros definidos como privados desde dentro de la clase y desde ningún otro lugar, independientemente del paquete o la herencia.















/-------------------------------------------------------------------------------------------------------------------------------------------------/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

											CLASE ABSTRACTA
							
					Se trata de una clase abstracta como concepto por que por ejemplo la clase Funcionario, esta dentro de todas las clases
					como gerente, contador, etc. Es que todos son Funcionarios.
					Todos somos funcionarios en la empresa pero cada bonificacion va a ser defenida por cada tipo
					de funcionario
					



///// clase abstracta 


	
public abstract class Funcionario {

	private String nombre;
	private String documento;
	private double salario;
	private int tipo;
	
//	
//	public Funcionario(String nombre, String documento,double salario, int tipo ) {
//		super();
//	}
	
	
	public Funcionario() {
		super();
	}
	
	
	
	
	/----- 	se puede instanciar una clase abstracta con una clase fisica como gerente 
	
	
	Funcionario	funcionario=new gerente();
		funcionario.setSalario(200);
		
		La clase tiene que ser extends a la clase abstracta en este caso funcionario, donde gerente extiende de funcionario
	
	

///////////////////////////////////////////////////
/-------METODOS ABSTRACTO----------------------/


	Cuando hacemos abstracto un metodo , las clases hijas deben implementar ese metodo sino ya no compila
	Para hacer un metodo abstracto debemos dejarlo sin declarar un cuerpo, ya que necesitara un return
	
	
	CLASE PADRE
	
	//sobreescritura de metodo

	public abstract double getBonificacion();
	
	
	en las clases hijas hay que implementar este metodo
	
	
	
	public double registrarSalario(Funcionario funcionario) {
		
		
		this.suma=funcionario.getBonificacion()+this.suma;
		System.out.println("calculo actual: "+this.suma);
		return this.suma;
	}
	
	
	
	@Override
	public double getBonificacion() {
		System.out.println("EJECUTANDO DESDE EL CONTADOR");
		return 200;
	}
	
	
	
//sobreescritura de metodo
	public double getBonificacion(){
		System.out.println("EJECUTANDO DESDE GERENTE");
		return super.getSalario()+this.getSalario()*0.05;
	}
	
	


/////////////////////////////////////////////////////////////

	UNA CLASE ABSTRACTA 
	
puede tener  variables, campos y puede referenciar objectos no abstractos, puede tener constructor por defecto y constructores personalizados
, tambien puede tener metodos reales, getters y setters. El unico cambio es que la clase no puede ser instanciada por si sola, sino que tiene
que ser instanciada con una implementacion real, de una clase que extienda de esta clase abstracta   	






/-------------------------------------------------------------------------------------------------------------------------------------------------/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

											HERENCIA MULTIPLE
											
											
				Una clase no puede heredar de varias clases padres, solo de una, eso usar el extends 	
				
				
				

				
				
/-------------------------------------------------------------------------------------------------------------------------------------------------/
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

											INTERFACE
											
				No es una relacion de familia pero es una caracteristica que idenfica y necesitas compartir y esa caracteristicas puedes enviar
				como parametro a los metodos por que es una caracteristica que necesita implementar para autenticar 							
				Una interface no puede tener metodos implementados, tiene que ser sin cuerpo el metodo. 	
				Una Interface no puede tener constructor	
				
				
				Todos los métodos de una interfaz son abstractos, los de una clase abstracta pueden no serlo.
				Correcto, todos los métodos en la interfaz son siempre abstractos y siempre públicos.
				En una clase abstracta podemos tener métodos concretos y abstractos.		
				
				La interface es abstracta hasta sus metodos pero no se escriben
				
				UNA INTERFAZ NO PUEDE EXTENDER DE UNA CLASE. UNA INTERFAZ PUEDE EXTENDER DE OTRA INTERFAZ
				
				
				
				/////////////////////
				INTERFACE:
				
				
	public interface Autenticable {


    	public  void setClave(String clave);
    
    
    	public  boolean iniciarSesion(String clave);

	}
				
				
				////////////////////
				CLASE ABSTRACT
				
				
				
				
public abstract class Funcionario {

    private String nombre;
    private String documento;
    protected double salario;
    private int tipo;

    public String getNombre() {
        return nombre;
    }

    public void setNombre(String nombre) {
        this.nombre = nombre;
    }

    public String getDocumento() {
        return documento;
    }

    public void setDocumento(String documento) {
        this.documento = documento;
    }

    public double getSalario() {
        return salario;
    }

    public void setSalario(double salario) {
        this.salario = salario;
    }

    public int getTipo() {
        return tipo;
    }

    public void setTipo(int tipo) {
        this.tipo = tipo;
    }

    public abstract double getBonificacion();
}
				
				
				