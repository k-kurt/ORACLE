


///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Paquetes en Java
								
								
								
								java.lang java.util  java.io
								
java.lang no es necesario importar por que es la base de todo el lenguaje

java.util es java son llamados los utilitarios, son estructura de datos, son objectos que nos
van a simplificar un poco la vida para realizar diferentes operaciones

							
					
					
					
///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Arrays en Java
									
Siempre los array inician el indice en 0 y hay que declarar el tamanio del array sino
no compila


Por ejemplo






package com.bytebank.test;

public class TestMain {

	public static void main(String[] args) {
		
		
		 int[] edades=new int[5];
		 edades[2]=30;
		 
		 System.out.println(edades[2]);
		 
		 for(int i=0;i<edades.length;i++) {
			 
			 System.out.println(edades[i]);//*
		 }
		 
		 
		
	}
	
	
}										
										
					*Si pongo la i sin edades[i] va a mostrar el recorrido del for
					del 1 al 5 pero no sus valores			
					
					
					Crear un array de tipo doble
					
					double[] precios = new double[5];
					
					
					Existe otra alternativa menos utilizada pero igualmente correcta
					double precios[] = new double[5];	
					
					
					se puede saber el tamanio del array
					
					
					int tamnioarray= edades.leng;
					
					system.out.line(tamanioarray);
					
					
					
					
					
					
					
					/////////////////////////////////////////////////////
					
Hasta ahora hemos visto la forma "clásica" de crear un objeto 
array utilizando la palabra clave new, por ejemplo:
										
										
															
	int[] numeros = new int[6];
	numeros[0] = 1;
	numeros[1] = 2;
	numeros[2] = 3;
	numeros[3] = 4;
	numeros[4] = 5;				
										


Sin embargo, también existe una forma literal. Literal, en este contexto, significa usar valores directamente,
 menos burocrático, más directo. Vea la diferencia:			
 



			int[] refs = {1,2,3,4,5};				
			
				
			
Usamos las llaves {} para indicar que es un array y los valores ya están		
declarados dentro de las llaves.






					/////////////////////////////////////////////////////
					
									CASTING
									
hacer que ub objeto se convierta en otro, que tenga sentido obviamente 


		CuentaCorriente	corriente=new CuentaCorriente(23, 44);
		
		CuentaAhorros ca=new CuentaAhorros(2, 22);
		
		
		Cuenta[] cuentas=new Cuenta[5];
		
		cuentas[1]=corriente;
		cuentas[2]=ca;

		
		cuentas[0]=new CuentaCorriente(32, 12);
		

		//obtener una cuenta del array
		
		//CuentaCorriente cuenta=cuentas[1]; //no compila por que cuentas[1] hace referencia
//		al array de tipo cuentas, que esta mas arriba y es mas absorbente, no es de tipo cuentaCorriente
//			
//		LA SOLUCION ES HACER CAST
		
		CuentaCorriente cuenta= (CuentaCorriente)cuentas[1]; 
		//estoy diciendole a java que este objecto cuenta es una cuenta corriente entonces ahora si
		//compila
		System.out.println(cuenta);
		
		
		
									/////////////////////////////////////////////////////
					QUE TENGA SENTIDO NOS REFERIMOS A ESTO
					
					
					
						CuentaAhorros cuenta= (CuentaAhorros)cuentas[1]; 
						
						
						
						tira una exception uncheck por que por mas que las dos sean cuentas y que tienen
						a Cuenta como padre, las dos cuentaCorriente y cuentaAhorro son dos objectos diferentes
						hay diferencias entre las dos entonces solo puede ser cast a cuentaCorriente por que
						fue creada como cuentaCorriente












///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Operaciones de Arrays en Java
										
										
					
public class GuardaCuentas {
	
	
	//Crear un objeto para guardar muchas cuentas
	//permitirnos agregar cuentas con un metodo
	//guardarCeuntas.adiciona(cuenta);
	//obtener.remover,etc.
	
	Cuenta[] cuenta=new Cuenta[10];

	int indice=0;
	
	public void adicionar(Cuenta cc) {
		// TODO Auto-generated method stub
		
		cuenta[indice]=cc;
		indice++;
		
	}

	public void obtener(int indice) {
		// TODO Auto-generated method stub
		
		System.out.println(cuenta[indice]);
		
	}

}
					
					
					
					
					
					
					test 
					
					
					package com.bytebank.test;

import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.CuentaCorriente;
import com.bytebank.modelo.GuardaCuentas;

public class TestGuardaCuenta {

	public static void main(String[] args) {
		GuardaCuentas guardarCuenta=new GuardaCuentas();
		
		Cuenta cc=new CuentaCorriente(1, 2);
		Cuenta ca=new CuentaAhorros(10, 20);
		
		//adicionar
		guardarCuenta.adicionar(cc);
		guardarCuenta.adicionar(ca);
		
		
		//Obtener
		guardarCuenta.obtener(0);
		guardarCuenta.obtener(1);
		
		
		
		
	}
}
										
										

///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Paquete Java.util en Java
										
	ARRAYLIST
	
	el metodo size() de un arraylist nos dice cuantos elementos tiene, no el tamnio de array
	por que cuando usamos arrayList no nos interesa el tamanio
	
	
	
	
	se creo el array de tipo Object
	
	package com.bytebank.modelo;

public class GuardaCuentas {
	
	
	//Crear un objeto para guardar muchas cuentas
	//permitirnos agregar cuentas con un metodo
	//guardarCeuntas.adiciona(cuenta);
	//obtener.remover,etc.
	
	Object[] cuenta=new Object[10];

	int indice=0;
	
	public void adicionar(Cuenta cc) {
		// TODO Auto-generated method stub
		
		cuenta[indice]=cc;
		indice++;
		
	}

	public void obtener(int indice) {
		// TODO Auto-generated method stub
		
		System.out.println(cuenta[indice]);
		
	}

}
	
	
	
	
	
	test
	
	
	
	
	
	package com.bytebank.test;

import java.util.ArrayList;

import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaCorriente;

public class TestArrayList {

	
	public static void main(String[] args) {
		
		ArrayList lista=new ArrayList();
		
		Cuenta cc=new CuentaCorriente(10, 20);
		Cuenta c2=new CuentaCorriente(20, 30);
		
		
		lista.add(cc);
		lista.add(c2);
		
		Cuenta obtenerCuenta=(Cuenta) lista.get(0);
		System.out.println(obtenerCuenta);
	}
	
}
	
	
	
			
					/////////////////////////////////////////////////////
					
									ArrayList<E>
									
Podemos definir una lista con ArrayList pero a la hora de mostrar esa lista, nos va a pedir cast
ya que si definimos sin el valor generic <E> nos acepta add(agregar) pero no define que tipo espera
recibir


package com.bytebank.test;

import java.util.ArrayList;

import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaCorriente;

public class TestArrayList {

	
	public static void main(String[] args) {
		
		ArrayList<Cuenta> lista=new ArrayList<Cuenta>();
		
		Cuenta cc=new CuentaCorriente(10, 20);
		Cuenta c2=new CuentaCorriente(20, 30);
		
		
		lista.add(cc);
		lista.add(c2);
		
		Cuenta obtenerCuenta=(Cuenta) lista.get(0);
		
		for(int i=0;i<lista.size();i++) {
			
		System.out.println(lista.get(i));
		}
		
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
			//imprime por cada cuenta : en la lista
		}
		
		
		
	}
	
}






ArrayList lista = new ArrayList(26); //capacidad inicial
lista.add("RJ");
lista.add("SP");
//otros estados
ArrayList nueva = new ArrayList(lista); //creando basada en la primera lista



	/////////////////////////////////////////////////////
					
									ForEach
									
			Se usa cuando no necesitamos indices y trabajamos con objectos mayoritariamente				
					Si vemos que todos son Cuentas 				
									
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
			//imprime por cada cuenta : en la lista
		}
		
		
		
		
		/////////////////////////////////////////////////////
					
									Metodo contains()
									
Nos dice true o false si el arraylist ya contiene el elemento
		
		
		
		boolean contiene=lista.contains(c2);
		if(contiene) {
			System.out.println("Si");
		}
		
		
		
		
		
		/////////////////////////////////////////////////////
					
									Metodo equals(Object obj)
									
									
					No es del paquete java.util 
					El metodo Contains utiliza internamente el metodo equals
					
					
					
					@Override
    public boolean equals(Object obj) {
	   Cuenta cuenta=(Cuenta)obj;
	   System.out.println("hola");
	   return this.agencia==cuenta.getAgencia() && this.numero==cuenta.getNumero();
	   
    }
    
    
    
    
    	//por referencia 
		boolean contiene=lista.contains(c2);
		if(contiene) {
			System.out.println("Si, es igual por equals");
		}
		
		
		
		
		
		
		
		---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
								LinkedList en Java
								o lista enlazada	
									
				Esto ya no es array, es una estructura de datos pero tmabien es una lista.Es un conjunto de objetos en el que
				cada objecto sabe cual es su objeto anterior. Cada obj se llama nodo, es un nodo de la lista enlazada
				Beneficios:
				Eliminar elementos o agregar elementos en orden especifico sin necesidad de recorrer todo el array
				Contras:
				Si tenemos que iterar la lista inpacta un poco en el performance
				
				
				
		package com.bytebank.test;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import com.bytebank.modelo.Cliente;
import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaCorriente;

public class TestArrayList {

	
	public static void main(String[] args) {
		
		
		SOLO CON INSTANCIAR LA INTERFAZ LIST Y LUEGO LA CLASE LINKEDLIST FUNCIONA IGUAL
		AQUI LA IMPLEMENTACION DE LA LISTA YA NO ES PARA NADA IGUAL A LA QUE HICIMOS
		A GUARDA REFERENCIAS POR QUE YA NO ESTAMOS USANDO ESA ESTRUCTURA DE DATOS, EL ARRAY ESTATICO 
		AHORA USAMOS LISTA ENDEXADAS CON EL LINKENDLIST QUE GUARDA UNA REFERENCIA AL OBJETO Y CON UN
		ATRIBUTO UNA REFERNECIA ENTRE ELLOS
		
		List<Cuenta> lista=new LinkedList<>();
		//ArrayList<Cuenta> lista=new ArrayList<>();
		
		Cuenta cc=new CuentaCorriente(10, 20);
		Cuenta c2=new CuentaCorriente(20, 30);
		Cuenta c3=new CuentaCorriente(20, 30);
		
		lista.add(cc);
		lista.add(c2);
		lista.add(c3);
		
		Cuenta obtenerCuenta=(Cuenta) lista.get(0);
		
		for(int i=0;i<lista.size();i++) {
			
		System.out.println(lista.get(i));
		}
		
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
			//imprime por cada cuenta : en la lista
		}
		
		boolean contiene=lista.contains(c2);
		if(contiene) {
			System.out.println("Si, es igual por equals");
		}

	}
	
}
				
				
				
				
	---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
												VECTOR
		El vector es thread safe, es un unico objecto para todas las pilas de ejecucion, como todo metodo tiene
		su propio hilo de ejecucion y hay una sola memoria HEAP, como todos quiere nactualizar en un mismo punto
		afecta el perfomance y ya no se usa. Por que llega uno hace el proceso y despues el siguiente 										
												
							public class TestArrayList {

    public static void main(String[] args) {

        //List<Cuenta> lista = new ArrayList<Cuenta>(); //usa array por debajo
        //List<Cuenta> lista = new LinkedList<Cuenta>(); //lista linkada
        List<Cuenta> lista = new Vector<Cuenta>(); //usa array por debajo, pero también es threadsafe

        //otro código omitido
        //...
    }
}






	
	---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												COLECCIONES
												
												
									

			Tenga en cuenta que algunas líneas de código dejan de compilarse, justo los métodos que usan la posición, 
			cómo remove(int pos) o get(int pos). Esto se debe a que solo las listas son secuencias y tienen un índice,
			 pero hay otras colecciones que funcionan sin índice y por lo tanto no tienen estos métodos.

			
			
			
			
				---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												INTEGER
												
No puede haber una lista de primitivo, el integer lo uso para crear un objeto de un primitivo como el int												
												
Es del paquete java.lang, Ya esta deprecado y para reemplzarlo la clase Integer ofrece sus metodos estaticos


package com.bytebank.test;

import java.util.LinkedList;
import java.util.List;

public class TestRepasoArray {

	
	public static void main(String[] args) {
		
		int[] numeros=new int[10];
		
		int numero=40;
		Integer numeroObjecto=new Integer(40);//aparece Integer tachado en compilacion
		
		List<Integer> lista=new LinkedList<Integer>();
		
		//primitivo!=object
		lista.add(numero); //AutoBoxing
		lista.add(new Integer(40));
		lista.add(numeroObjecto);
		
		
	}
	
	
}
 												
								
								
								
								/////////////////////////////////////////////
								DEPRECADO, REEMPLAZO
								
								
								package com.bytebank.test;

import java.util.LinkedList;
import java.util.List;

public class TestRepasoArray {

	
	public static void main(String[] args) {
		
		int[] numeros=new int[10];
		//  WRAPPER 
		int numero=40;
		// CLASE WRAPPER envuelve el tipo primitivo
		//Integer numeroObjecto=new Integer(40); DEPRECADO
								//metodo static no necesita el 'new'
		Integer numeroObjecto= Integer.valueOf(40); 
		
		
		
		List<Integer> lista=new LinkedList<Integer>();
		
		//primitivo!=object
		lista.add(numero); //AutoBoxing
		lista.add(Integer.valueOf(40));
		lista.add(numeroObjecto);
		
		
		
		//unboxing 
		//int valorPrimitivo=numeroObjecto;
		//internamente toma el valor solamente
		int valorPrimitivo=numeroObjecto.intValue();
		
		//retornar el valor en byte
		numeroObjecto.byteValue();

		//retornar el valor en double
		numeroObjecto.doubleValue();

		//retornar el valor en float
		numeroObjecto.floatValue();
		
		
		
			
			//Convierte en los primitivos pedidos del objeto Integer
				//retornar el valor en byte
				byte byteInteger=numeroObjecto.byteValue();

				//retornar el valor en double
				double doubleInteger=numeroObjecto.doubleValue();

				//retornar el valor en float
				float floatInteger=numeroObjecto.floatValue();
		
				
				
				//saber el tamanio maximo de la varible
				//del entero
				System.out.println(Integer.MAX_VALUE);
				System.out.println(Integer.MIN_VALUE);
				
				//del bits
				System.out.println(Integer.SIZE);
				//del byte
				System.out.println(Integer.BYTES);//4;
				
	}
	
	
}
								
								
								
								
////////////////////Un ejemplo


public class TestWrapper {

    public static void main(String[] args){
        Integer ref = Integer.valueOf("3");
        ref++;
        System.out.println(ref);
    }
}
								
	////////////internamente
							
							
int valor = ref.intValue();
valor = valor + 1;
ref = Integer.valueOf(valor);	
								
								
								
								
								
											////////////////////////////////////////////////////////
											valueOf()
											
											
						es un metodo que eesta supercargado entonces me permite cargar varios tipos de datos
						
							//Convierte en los primitivos pedidos del objeto Integer
				//retornar el valor en byte
				byte byteInteger=numeroObjecto.byteValue();

				//retornar el valor en double
				double doubleInteger=numeroObjecto.doubleValue();

				//retornar el valor en float
				float floatInteger=numeroObjecto.floatValue();
				
				
				
				
				
				
					---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												ORDENANDO LISTA
												
La clase String ya tiene su propio metodo que nos permite ahorra la logica de ordenar por nombre







package com.bytebank.test;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

import com.bytebank.modelo.Cliente;
import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.CuentaCorriente;

public class TestOrdenarLista {

	public static void main(String[] args) {

//		Cuenta cc1 = new CuentaCorriente(22, 33);
//		cc1.deposita(333.0);
//
//		Cuenta cc2 = new CuentaAhorros(22, 44);
//		cc2.deposita(444.0);
//
//		Cuenta cc3 = new CuentaCorriente(22, 11);
//		cc3.deposita(111.0);
//
//		Cuenta cc4 = new CuentaAhorros(22, 22);
//		cc4.deposita(222.0);
//
//		List<Cuenta> lista = new ArrayList<>();
//		lista.add(cc1);
//		lista.add(cc2);
//		lista.add(cc3);
//		lista.add(cc4);

		Cuenta cc1 = new CuentaCorriente(22, 33);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNombre("Diego");
		cc1.setTitular(clienteCC1);
		cc1.deposita(333.0);

		Cuenta cc2 = new CuentaAhorros(22, 44);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNombre("Renato");
		cc2.setTitular(clienteCC2);
		cc2.deposita(444.0);

		Cuenta cc3 = new CuentaCorriente(22, 11);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNombre("Liam");
		cc3.setTitular(clienteCC3);
		cc3.deposita(111.0);

		Cuenta cc4 = new CuentaAhorros(22, 22);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNombre("Noel");
		cc4.setTitular(clienteCC4);
		cc4.deposita(222.0);

		List<Cuenta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);

		System.out.println("antes de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

		// Ordenar las cuentas
		// cualquier clase hija de Cuenta
		// Comparator <? extend Cuenta> c
		// pide la implementacion de la clase, lo de arriba
		Comparator<Cuenta> comparator = new OrdenadorPorNumeroCuenta();
		lista.sort(comparator);

		System.out.println("despues de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

		
		System.out.println("Antes de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		Comparator<Cuenta> compartor=new OrdenadorPorNombreTitular();
		lista.sort(compartor);

		System.out.println("despues de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
	}

}

class OrdenadorPorNumeroCuenta implements Comparator<Cuenta> {

	@Override
	public int compare(Cuenta o1, Cuenta o2) {
		// TODO Auto-generated method stub

		if (o1.getNumero() == o2.getNumero()) {
			return 0;// el 0
		} else if (o1.getNumero() > o2.getNumero()) {
			return 1;// un positivo
		} else {

			return -1;// un negativo
		}
	}
}


class OrdenadorPorNombreTitular implements Comparator<Cuenta>{

	@Override
	public int compare(Cuenta o1, Cuenta o2) {
		
		//funciona internamente como el otro, devuelve -1,0,1 
		return o1.getTitular().getNombre().compareTo(o2.getTitular().getNombre());
					
	}
	
}



												
				
				//////////////////////////////////////////////////////////////////////////////////
				haciendo lo mismo pero de diferente formas
				
				class OrdenadorPorNumeroCuenta implements Comparator<Cuenta> {

	@Override
	public int compare(Cuenta o1, Cuenta o2) {
		// TODO Auto-generated method stub

		//Forma basica
//		if (o1.getNumero() == o2.getNumero()) {
//			return 0;// el 0
//		} else if (o1.getNumero() > o2.getNumero()) {
//			return 1;// un positivo
//		} else {
//
//			return -1;// un negativo
//		}
		
		//forma intermedia
		//return o1.getNumero()-o2.getNumero();
		
		//forma Wrapper
		return Integer.compare(o1.getNumero(), o2.getNumero());
		
		
	}
}
				
				
				
				
						
					---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												INTERFAZ FUNCIONAL 
												
												
								Es cuando tiene un solo metodo que aplicar y se declara directamente sin asiganar la instancia 
								a una variable
								
								//Comparator<Cuenta> compartor=new OrdenadorPorNombreTitular();
								lista.sort(new OrdenadorPorNombreTitular());
								
								
								
								
								
								package com.bytebank.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.bytebank.modelo.Cliente;
import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.CuentaCorriente;

public class TestOrdenarLista {

	public static void main(String[] args) {

//		Cuenta cc1 = new CuentaCorriente(22, 33);
//		cc1.deposita(333.0);
//
//		Cuenta cc2 = new CuentaAhorros(22, 44);
//		cc2.deposita(444.0);
//
//		Cuenta cc3 = new CuentaCorriente(22, 11);
//		cc3.deposita(111.0);
//
//		Cuenta cc4 = new CuentaAhorros(22, 22);
//		cc4.deposita(222.0);
//
//		List<Cuenta> lista = new ArrayList<>();
//		lista.add(cc1);
//		lista.add(cc2);
//		lista.add(cc3);
//		lista.add(cc4);

		Cuenta cc1 = new CuentaCorriente(22, 33);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNombre("Diego");
		cc1.setTitular(clienteCC1);
		cc1.deposita(333.0);

		Cuenta cc2 = new CuentaAhorros(32, 44);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNombre("Renato");
		cc2.setTitular(clienteCC2);
		cc2.deposita(444.0);

		Cuenta cc3 = new CuentaCorriente(42, 11);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNombre("Liam");
		cc3.setTitular(clienteCC3);
		cc3.deposita(111.0);

		Cuenta cc4 = new CuentaAhorros(26, 22);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNombre("Noel");
		cc4.setTitular(clienteCC4);
		cc4.deposita(222.0);

		List<Cuenta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);

		System.out.println("antes de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		//ORDENAR DESDE LA VERSION 8
		// Ordenar las cuentas
		// cualquier clase hija de Cuenta
		// Comparator <? extend Cuenta> c
		// pide la implementacion de la clase, lo de arriba
		Comparator<Cuenta> comparator = new OrdenadorPorNumeroCuenta();
		lista.sort(comparator);

		System.out.println("despues de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

		
		System.out.println("Antes de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
//		Comparator<Cuenta> compartor=new OrdenadorPorNombreTitular();
//		lista.sort(compartor);

		
		
		
		//ORDENAR D LA ANTIGUA FORMA
		
		Collections.sort(lista, new OrdenadorPorNombreTitular());
		//establecer ordenamiento por orden natural
		
		
		
		System.out.println("despues de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		Collections.sort(lista);
		
		
		System.out.println("despues de ordenar por orden natural");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		
		
	}

}

class OrdenadorPorNumeroCuenta implements Comparator<Cuenta> {

	@Override
	public int compare(Cuenta o1, Cuenta o2) {
		// TODO Auto-generated method stub

		//Forma basica
//		if (o1.getNumero() == o2.getNumero()) {
//			return 0;// el 0
//		} else if (o1.getNumero() > o2.getNumero()) {
//			return 1;// un positivo
//		} else {
//
//			return -1;// un negativo
//		}
		
		//forma intermedia
		//return o1.getNumero()-o2.getNumero();
		
		//forma Wrapper
		return Integer.compare(o1.getNumero(), o2.getNumero());
		
		
	}
}


class OrdenadorPorNombreTitular implements Comparator<Cuenta>{

	@Override
	public int compare(Cuenta o1, Cuenta o2) {
		
		//funciona internamente como el otro, devuelve -1,0,1 
		return o1.getTitular().getNombre().compareTo(o2.getTitular().getNombre());
					
	}
	
}




////////////////////////
implementamos la interface y su metodo compareTo EN LA CLASE CUENTA PARA DAR EL ORDEN NATURAL 
CUANDO UTILIZAMOS LA INSTANCIA DE UN SOLO PARAMETRO PASANDO SOLO LA LISTA



package com.bytebank.modelo;

/**
 * Probando la documentacion javadoc
 * @version 1.0
 * @author genesis
 * 
 *
 */

public abstract class Cuenta implements Comparable<Cuenta>{
	
    protected double saldo;
    private int agencia = 1;
    private int numero;
    private Cliente titular = new Cliente();

    private static int total;
    
    
    public Cuenta() {
    
    	
    }
    
    
    /**
     * este constructor necesita 2 parametros agencia y numero para instanciar la clase
     * Cuenta
     * @param agencia
     * @param numero
     */
    public Cuenta( int agencia, int numero) {
        this.agencia = agencia;
        this.numero = numero;
        System.out.println("Estoy creando una cuenta " + this.numero);

        Cuenta.total ++;
    }
    
    public abstract void deposita(double valor);
    
    

    
    /**
     * este metodo retira dinero de la cuenta y si ocurre un error 
     * devuelve una exception
     * @param valor
     * @throws SaldoInsuficienteException
     */
    public void saca(double valor) throws SaldoInsuficienteException {
          
    	if(this.saldo<valor) {
    		throw  new SaldoInsuficienteException("no tienes saldo");
    	}
    	this.saldo -= valor; 
    }
          
    public boolean transfiere(double valor, Cuenta destino) throws SaldoInsuficienteException {
        if(this.saldo >= valor) {
            this.saca(valor);
            destino.deposita(valor);
            return true;
        } else {
            return false;
        }
    }

    public double getSaldo() {
        return saldo;
    }

    public int getAgencia() {
        return agencia;
    }

    public void setAgencia(int agencia) {
        if (agencia > 0) {
            this.agencia = agencia;
        }
    }

    public int getNumero() {
        return numero;
    }

    public void setNumero(int numero) {
        if (numero > 0) {
            this.numero = numero;
        }
    }

    public Cliente getTitular() {
        return titular;
    }

    public void setTitular(Cliente titular) {
        this.titular = titular;
    }

    public static int getTotal() {
        return Cuenta.total;
    }
    @Override
    public String toString() {
    
    	String cuenta="Numero: "+this.numero+" ,Agencia: "+this.agencia+", Titular: "+this.titular.getNombre();
    	
    	return cuenta;
    }

    
//    public boolean esIgual(Cuenta cuenta) {
//    	return this.agencia==cuenta.getAgencia() && this.numero==cuenta.getNumero();
//    }
    
   @Override
    public boolean equals(Object obj) {
	   Cuenta cuenta=(Cuenta)obj;
	   System.out.println("hola");
	   return this.agencia==cuenta.getAgencia() && this.numero==cuenta.getNumero();
	   
    }
    
   
   
   @Override
public int compareTo(Cuenta o) {
	// TODO Auto-generated method stub
	
	   //orden natural: Numero Agencia   
	   //return Integer.compare(this.agencia, o.getAgencia());
	   //Orden natural"saldo
	   return Double.compare(this.saldo, o.getSaldo());
}
    
    
}





////////////////////resultado


Estoy creando una cuenta 33
Estoy creando una cuenta 44
Estoy creando una cuenta 11
Estoy creando una cuenta 22
antes de ordenar
Numero: 33 ,Agencia: 22, Titular: Diego
Numero: 44 ,Agencia: 32, Titular: Renato
Numero: 11 ,Agencia: 42, Titular: Liam
Numero: 22 ,Agencia: 26, Titular: Noel
despues de ordenar
Numero: 33 ,Agencia: 22, Titular: Diego
Numero: 44 ,Agencia: 32, Titular: Renato
Numero: 11 ,Agencia: 42, Titular: Liam
Numero: 22 ,Agencia: 26, Titular: Noel
Antes de ordenar por nombre
Numero: 33 ,Agencia: 22, Titular: Diego
Numero: 44 ,Agencia: 32, Titular: Renato
Numero: 11 ,Agencia: 42, Titular: Liam
Numero: 22 ,Agencia: 26, Titular: Noel
despues de ordenar por nombre
Numero: 33 ,Agencia: 22, Titular: Diego
Numero: 11 ,Agencia: 42, Titular: Liam
Numero: 22 ,Agencia: 26, Titular: Noel
Numero: 44 ,Agencia: 32, Titular: Renato
despues de ordenar por orden natural
Numero: 33 ,Agencia: 22, Titular: Diego
Numero: 11 ,Agencia: 42, Titular: Liam
Numero: 22 ,Agencia: 26, Titular: Noel
Numero: 44 ,Agencia: 32, Titular: Renato






					---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												CLASE ANONIMA
												
												
									
					Es por que no implementamos o creamos una clase aparte para poder utilizar un metodo, que como una clase
					es para identificar un ente, nos queda inutil solo instanciar una clase solo para utilizar un metodo, se
					pierde la encensia del POO de Java
					
					Entonces intanciamos el metetodo directamente en el codigo dentro de los parametros de alguna clase, en su instancia
					
					Java crea la clase internamente 
					
					YA no hace falta crear las clases comentadas 
					
					
					
					package com.bytebank.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.bytebank.modelo.Cliente;
import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.CuentaCorriente;

public class TestOrdenarLista {

	public static void main(String[] args) {

//		Cuenta cc1 = new CuentaCorriente(22, 33);
//		cc1.deposita(333.0);
//
//		Cuenta cc2 = new CuentaAhorros(22, 44);
//		cc2.deposita(444.0);
//
//		Cuenta cc3 = new CuentaCorriente(22, 11);
//		cc3.deposita(111.0);
//
//		Cuenta cc4 = new CuentaAhorros(22, 22);
//		cc4.deposita(222.0);
//
//		List<Cuenta> lista = new ArrayList<>();
//		lista.add(cc1);
//		lista.add(cc2);
//		lista.add(cc3);
//		lista.add(cc4);

		Cuenta cc1 = new CuentaCorriente(22, 33);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNombre("Diego");
		cc1.setTitular(clienteCC1);
		cc1.deposita(333.0);

		Cuenta cc2 = new CuentaAhorros(32, 44);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNombre("Renato");
		cc2.setTitular(clienteCC2);
		cc2.deposita(444.0);

		Cuenta cc3 = new CuentaCorriente(42, 11);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNombre("Liam");
		cc3.setTitular(clienteCC3);
		cc3.deposita(111.0);

		Cuenta cc4 = new CuentaAhorros(26, 22);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNombre("Noel");
		cc4.setTitular(clienteCC4);
		cc4.deposita(222.0);

		List<Cuenta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);

		System.out.println("antes de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		//ORDENAR DESDE LA VERSION 8
		
		
		
		// Ordenar las cuentas
		// cualquier clase hija de Cuenta
		// Comparator <? extend Cuenta> c
		// pide la implementacion de la clase, lo de arriba
		//Comparator<Cuenta> comparator = new OrdenadorPorNumeroCuenta();//implementacion de la interfaz
		//lista.sort(comparator);
		
		
		//CLASE ANONIMA
		//Instanciando directamente la implementacion de la interfaz
		lista.sort(new Comparator<Cuenta>() {

			@Override
			public int compare(Cuenta o1, Cuenta o2) {
				// TODO Auto-generated method stub
				return Integer.compare(o1.getNumero(), o2.getNumero());
				
			}
			
		});

		System.out.println("despues de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

		
		System.out.println("Antes de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
//		Comparator<Cuenta> compartor=new OrdenadorPorNombreTitular();
//		lista.sort(compartor);

		
		
		
		//ORDENAR D LA ANTIGUA FORMA
		
		//Collections.sort(lista, new OrdenadorPorNombreTitular());
		
		
		
		//CLASE ANONIMA
		//como acepta el segundo parametro lo instanciamos ahi
		Collections.sort(lista, new Comparator<Cuenta>() {

			@Override
			public int compare(Cuenta o1, Cuenta o2) {
				// TODO Auto-generated method stub
				return o1.getTitular().getNombre().compareTo(o2.getTitular().getNombre());
				
			}
			
		});
		
		
		
		
		System.out.println("despues de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		
		//establecer ordenamiento por orden natural, implementando en la clase Cuenta la interfaz con su metodo 
		Collections.sort(lista);
		
		
		System.out.println("despues de ordenar por orden natural");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		
		
	}

}
//
//class OrdenadorPorNumeroCuenta implements Comparator<Cuenta> {
//
//	@Override
//	public int compare(Cuenta o1, Cuenta o2) {
//		// TODO Auto-generated method stub
//
//		//Forma basica
////		if (o1.getNumero() == o2.getNumero()) {
////			return 0;// el 0
////		} else if (o1.getNumero() > o2.getNumero()) {
////			return 1;// un positivo
////		} else {
////
////			return -1;// un negativo
////		}
//		
//		//forma intermedia
//		//return o1.getNumero()-o2.getNumero();
//		
//		//forma Wrapper
//		return Integer.compare(o1.getNumero(), o2.getNumero());
//		
//		
//	}
//}
//
//
//class OrdenadorPorNombreTitular implements Comparator<Cuenta>{
//
//	@Override
//	public int compare(Cuenta o1, Cuenta o2) {
//		
//		//funciona internamente como el otro, devuelve -1,0,1 
//		return o1.getTitular().getNombre().compareTo(o2.getTitular().getNombre());
//					
//	}
//	
//}
					
					
					
					
					
					
					
					
					
					
					

					---------------------------------------------------------------------------------------------------------
		///////////////////////////////////////////////////////////////////////////////////////////////////////	
		
												CLASE LAMBDA
												
								Java automaticamente manda esos parametrosal metodo compare que esta en a la 
								interfaz funcional comparetor. como esa interfaz tiene un solo metodo 
								mandamos como parametro esa expresion lambda
								Se puede seguir instanciado cosas en un lamda
								
								
								
								
								
package com.bytebank.test;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import com.bytebank.modelo.Cliente;
import com.bytebank.modelo.Cuenta;
import com.bytebank.modelo.CuentaAhorros;
import com.bytebank.modelo.CuentaCorriente;

public class TestLambda {
	public static void main(String[] args) {

		Cuenta cc1 = new CuentaCorriente(22, 33);
		Cliente clienteCC1 = new Cliente();
		clienteCC1.setNombre("Diego");
		cc1.setTitular(clienteCC1);
		cc1.deposita(333.0);

		Cuenta cc2 = new CuentaAhorros(32, 44);
		Cliente clienteCC2 = new Cliente();
		clienteCC2.setNombre("Renato");
		cc2.setTitular(clienteCC2);
		cc2.deposita(444.0);

		Cuenta cc3 = new CuentaCorriente(42, 11);
		Cliente clienteCC3 = new Cliente();
		clienteCC3.setNombre("Liam");
		cc3.setTitular(clienteCC3);
		cc3.deposita(111.0);

		Cuenta cc4 = new CuentaAhorros(26, 22);
		Cliente clienteCC4 = new Cliente();
		clienteCC4.setNombre("Noel");
		cc4.setTitular(clienteCC4);
		cc4.deposita(222.0);

		List<Cuenta> lista = new ArrayList<>();
		lista.add(cc1);
		lista.add(cc2);
		lista.add(cc3);
		lista.add(cc4);

		System.out.println("antes de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
		
		
		//ORDENAR DESDE LA VERSION 8
		
		
		
		//EXPRESION LAMBDA
		//me quedo con los parametros y la logica
//		lista.sort((Cuenta o1, Cuenta o2) ->{
//				// TODO Auto-generated method stub
//				return Integer.compare(o1.getNumero(), o2.getNumero());
//				
//			}
//		
//		);
		
		//quitamos las llaves
//		lista.sort((Cuenta o1, Cuenta o2) ->
//			// TODO Auto-generated method stub
//			return Integer.compare(o1.getNumero(), o2.getNumero());	
//	);
		
		
		
//quitamos el return
		//si usamos las llaves necesitamos el return por el contexto, el compare ya retorna un entero
//		lista.sort((Cuenta o1, Cuenta o2) ->
//		Integer.compare(o1.getNumero(), o2.getNumero());	
//	);
		
		
		
		//el punto y coma sale sobrando
		lista.sort((Cuenta o1, Cuenta o2) ->Integer.compare(o1.getNumero(), o2.getNumero())	
	);
		
		
		
		System.out.println("despues de ordenar");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

		
		System.out.println("Antes de ordenar por nombre");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}
//		Comparator<Cuenta> compartor=new OrdenadorPorNombreTitular();
//		lista.sort(compartor);

		
		
		
		//ORDENAR D LA ANTIGUA FORMA
		
		//Collections.sort(lista, new OrdenadorPorNombreTitular());
		
		
		//como acepta el segundo parametro lo instanciamos ahi
//		Collections.sort(lista, new Comparator<Cuenta>() {
//
//			@Override
//			public int compare(Cuenta o1, Cuenta o2) {
//				// TODO Auto-generated method stub
//				return o1.getTitular().getNombre().compareTo(o2.getTitular().getNombre());
//				
//			}
//			
//		});
		//establecer ordenamiento por orden natural
		

		//lambda de lo de arriba		
//		Collections.sort(lista, (c1, c2)->{
//			return c1.getTitular().getNombre().compareTo(c2.getTitular().getNombre());
//		});
		//c1 y c2 ya sabe que son de tipo lista
		
		Collections.sort(lista, (c1, c2)->c1.getTitular().getNombre().compareTo(c2.getTitular().getNombre())
		);
		
		
		
		
		System.out.println("despues de ordenar por nombre");
//		for (Cuenta cuenta : lista) {
//			System.out.println(cuenta);
//		}
//		
		//LAMBDA DE FOREACH
		//el foreach tambien acepta lambda
//		lista.forEach((Cuenta cuenta) ->{
//			System.out.println(cuenta);
//		});
		
		
		//YA sabe que es una Cuenta, no hace falta declarar
		lista.forEach( cuenta ->System.out.println(cuenta));
		
		
		
		
		Collections.sort(lista);
		
		
		System.out.println("despues de ordenar por orden natural");
		for (Cuenta cuenta : lista) {
			System.out.println(cuenta);
		}

	}
}
								
												
												
					