


///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Paquetes en Java
								
								
								
								java.lang java.util  java.io
								
java.lang no es necesario importar por que es la base de todo el lenguaje

java.util es java son llamados los utilitarios, son estructura de datos, son objectos que nos
van a simplificar un poco la vida para realizar diferentes operaciones

							
					
					
					
///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Arrays en Java
									
Siempre los array inician el indice en 0 y hay que declarar el tamanio del array sino
no compila


Por ejemplo






package com.bytebank.test;

public class TestMain {

	public static void main(String[] args) {
		
		
		 int[] edades=new int[5];
		 edades[2]=30;
		 
		 System.out.println(edades[2]);
		 
		 for(int i=0;i<edades.length;i++) {
			 
			 System.out.println(edades[i]);//*
		 }
		 
		 
		
	}
	
	
}										
										
					*Si pongo la i sin edades[i] va a mostrar el recorrido del for
					del 1 al 5 pero no sus valores			
					
					
					Crear un array de tipo doble
					
					double[] precios = new double[5];
					
					
					Existe otra alternativa menos utilizada pero igualmente correcta
					double precios[] = new double[5];	
					
					
					se puede saber el tamanio del array
					
					
					int tamnioarray= edades.leng;
					
					system.out.line(tamanioarray);
					
					
					
					
					
					
					
					/////////////////////////////////////////////////////
					
Hasta ahora hemos visto la forma "clásica" de crear un objeto 
array utilizando la palabra clave new, por ejemplo:
										
										
															
	int[] numeros = new int[6];
	numeros[0] = 1;
	numeros[1] = 2;
	numeros[2] = 3;
	numeros[3] = 4;
	numeros[4] = 5;				
										


Sin embargo, también existe una forma literal. Literal, en este contexto, significa usar valores directamente,
 menos burocrático, más directo. Vea la diferencia:			
 



			int[] refs = {1,2,3,4,5};				
			
				
			
Usamos las llaves {} para indicar que es un array y los valores ya están		
declarados dentro de las llaves.






					/////////////////////////////////////////////////////
					
									CASTING
									
hacer que ub objeto se convierta en otro, que tenga sentido obviamente 


		CuentaCorriente	corriente=new CuentaCorriente(23, 44);
		
		CuentaAhorros ca=new CuentaAhorros(2, 22);
		
		
		Cuenta[] cuentas=new Cuenta[5];
		
		cuentas[1]=corriente;
		cuentas[2]=ca;

		
		cuentas[0]=new CuentaCorriente(32, 12);
		

		//obtener una cuenta del array
		
		//CuentaCorriente cuenta=cuentas[1]; //no compila por que cuentas[1] hace referencia
//		al array de tipo cuentas, que esta mas arriba y es mas absorbente, no es de tipo cuentaCorriente
//			
//		LA SOLUCION ES HACER CAST
		
		CuentaCorriente cuenta= (CuentaCorriente)cuentas[1]; 
		//estoy diciendole a java que este objecto cuenta es una cuenta corriente entonces ahora si
		//compila
		System.out.println(cuenta);
		
		
		
									/////////////////////////////////////////////////////
					QUE TENGA SENTIDO NOS REFERIMOS A ESTO
					
					
					
						CuentaAhorros cuenta= (CuentaAhorros)cuentas[1]; 
						
						
						
						tira una exception uncheck por que por mas que las dos sean cuentas y que tienen
						a Cuenta como padre, las dos cuentaCorriente y cuentaAhorro son dos objectos diferentes
						hay diferencias entre las dos entonces solo puede ser cast a cuentaCorriente por que
						fue creada como cuentaCorriente












///////////////////////////////////////////////////////////////////////////////////////////////////////	
								Operaciones de Arrays en Java
										
										
										
										